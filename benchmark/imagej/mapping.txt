ij.CommandListener -> ij.a:
    java.lang.String commandExecuting(java.lang.String) -> a
ij.CompositeImage -> ij.b:
    int[] rgbPixels -> h
    boolean newPixels -> i
    java.awt.image.MemoryImageSource imageSource -> j
    java.awt.Image awtImage -> k
    java.awt.image.WritableRaster rgbRaster -> l
    java.awt.image.SampleModel rgbSampleModel -> m
    java.awt.image.BufferedImage rgbImage -> n
    java.awt.image.ColorModel rgbCM -> o
    ij.process.ImageProcessor[] cip -> p
    java.awt.Color[] colors -> q
    ij.process.LUT[] lut -> r
    int currentChannel -> s
    int currentSlice -> t
    int currentFrame -> u
    boolean singleChannel -> v
    boolean[] active -> w
    int mode -> x
    int bitDepth -> y
    double[] displayRanges -> z
    byte[][] channelLuts -> A
    boolean customLuts -> B
    boolean syncChannels -> C
    java.awt.Image getImage() -> a
    void updateChannelAndDraw() -> b
    void updateAllChannelsAndDraw() -> c
    void setup(int,ij.ImageStack) -> a
    void setupLuts(int) -> k
    void resetDisplayRanges() -> d
    void updateAndDraw() -> e
    void updateImage() -> f
    java.awt.Color getChannelColor() -> g
    boolean[] getActiveChannels() -> h
    void setMode(int) -> a
    int getMode() -> i
    java.lang.String getModeAsString() -> j
    ij.process.LUT getChannelLut(int) -> b
    ij.process.LUT getChannelLut() -> k
    ij.process.LUT[] getLuts() -> l
    void setLuts(ij.process.LUT[]) -> a
    void copyLuts(ij.ImagePlus) -> a
    int getChannelIndex() -> aB
    void reset() -> m
    void setChannelLut(ij.process.LUT) -> a
    void setChannelLut(ij.process.LUT,int) -> a
    void setDisplayRange(double,double) -> a
    double getDisplayRangeMin() -> n
    double getDisplayRangeMax() -> o
    void resetDisplayRange() -> p
    boolean hasCustomLuts() -> q
    void setChannelsUpdated() -> r
ij.Executer -> ij.c:
    java.lang.String previousCommand -> a
    java.util.Vector listeners -> b
    java.lang.String command -> c
    java.lang.Thread thread -> d
    void run() -> run
    void runCommand(java.lang.String) -> a
    boolean openRecent(java.lang.String) -> b
    void addCommandListener(ij.CommandListener) -> a
    void removeCommandListener(ij.CommandListener) -> b
ij.IJ -> ij.d:
    boolean debugMode -> a
    boolean hideProcessStackDialog -> b
    ij.ImageJ ij -> c
    java.applet.Applet applet -> d
    ij.gui.ProgressBar progressBar -> e
    ij.text.TextPanel textPanel -> f
    java.lang.String osname -> g
    java.lang.String osarch -> h
    boolean isMac -> i
    boolean isWin -> j
    boolean isJava2 -> k
    boolean isJava14 -> l
    boolean isJava15 -> m
    boolean isJava16 -> n
    boolean isLinux -> o
    boolean isVista -> p
    boolean controlDown -> q
    boolean altDown -> r
    boolean spaceDown -> s
    boolean shiftDown -> t
    boolean macroRunning -> u
    java.lang.Thread previousThread -> v
    ij.text.TextPanel logPanel -> w
    boolean checkForDuplicatePlugins -> x
    java.lang.ClassLoader classLoader -> y
    boolean memMessageDisplayed -> z
    long maxMemory -> A
    boolean escapePressed -> B
    boolean redirectErrorMessages -> C
    boolean redirectErrorMessages2 -> D
    boolean suppressPluginNotFoundError -> E
    java.util.Hashtable commandTable -> F
    java.util.Vector eventListeners -> G
    java.text.DecimalFormat[] df -> H
    java.text.DecimalFormat[] sf -> I
    java.text.DecimalFormatSymbols dfs -> J
    void init(ij.ImageJ,java.applet.Applet) -> a
    void cleanup() -> a
    ij.ImageJ getInstance() -> b
    java.lang.String runMacro(java.lang.String) -> a
    java.lang.String runMacro(java.lang.String,java.lang.String) -> a
    java.lang.String runMacroFile(java.lang.String,java.lang.String) -> b
    java.lang.String runMacroFile(java.lang.String) -> b
    java.lang.Object runPlugIn(java.lang.String,java.lang.String) -> c
    java.lang.Object runPlugIn(java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.Object runUserPlugIn(java.lang.String,java.lang.String,java.lang.String,boolean) -> a
    void doCommand(java.lang.String) -> c
    void run(java.lang.String) -> d
    void run(java.lang.String,java.lang.String) -> d
    void run(ij.ImagePlus,java.lang.String,java.lang.String) -> a
    void init() -> O
    boolean macroRunning() -> c
    boolean isMacro() -> d
    java.applet.Applet getApplet() -> e
    void showStatus(java.lang.String) -> e
    void write(java.lang.String) -> f
    void showResults() -> P
    void log(java.lang.String) -> g
    void handleLogCommand(java.lang.String) -> t
    java.lang.String getLog() -> f
    void setColumnHeadings(java.lang.String) -> h
    boolean isResultsWindow() -> g
    void renameResults(java.lang.String) -> i
    void renameResults(java.lang.String,java.lang.String) -> e
    void deleteRows(int,int) -> a
    ij.text.TextPanel getTextPanel() -> h
    void setTextPanel(ij.text.TextPanel) -> a
    void noImage() -> i
    void outOfMemory$552c4e01() -> j
    void showProgress(double) -> a
    void showProgress(int,int) -> b
    void showMessage(java.lang.String,java.lang.String) -> f
    void error(java.lang.String) -> j
    void error(java.lang.String,java.lang.String) -> g
    boolean showMessageWithCancel(java.lang.String,java.lang.String) -> h
    java.lang.String getString(java.lang.String,java.lang.String) -> i
    void wait(int) -> a
    void beep() -> k
    java.lang.String freeMemory() -> l
    long currentMemory() -> m
    long maxMemory() -> n
    void showTime(ij.ImagePlus,long,java.lang.String,int) -> a
    java.lang.String d2s(double) -> b
    java.lang.String d2s(double,int) -> a
    java.lang.String d2s(double,int,int) -> a
    java.lang.String pad(int,int) -> c
    void register(java.lang.Class) -> a
    boolean spaceBarDown() -> o
    boolean controlKeyDown() -> p
    boolean altKeyDown() -> q
    boolean shiftKeyDown() -> r
    void setKeyDown(int) -> b
    void setKeyUp(int) -> c
    void setInputEvent(java.awt.event.InputEvent) -> a
    boolean isMacintosh() -> s
    boolean isMacOSX() -> t
    boolean isWindows() -> u
    boolean isJava2() -> v
    boolean isJava14() -> w
    boolean isJava15() -> x
    boolean isJava16() -> y
    boolean isLinux() -> z
    boolean isVista() -> A
    boolean is64Bit() -> B
    boolean versionLessThan(java.lang.String) -> k
    int setupDialog(ij.ImagePlus,int) -> a
    void makeRectangle(int,int,int,int) -> a
    void makeOval(int,int,int,int) -> b
    void makeLine(double,double,double,double) -> a
    void makePoint(int,int) -> d
    void setMinAndMax(double,double,int) -> a
    void resetMinAndMax() -> C
    void setThreshold(double,double,java.lang.String) -> a
    void setAutoThreshold(ij.ImagePlus,java.lang.String) -> a
    void resetThreshold() -> D
    void selectWindow(int) -> d
    void selectWindow(java.lang.String) -> l
    void setForegroundColor(int,int,int) -> a
    void setBackgroundColor(int,int,int) -> b
    void setColor(int,int,int,boolean) -> a
    void setTool(int) -> e
    boolean setTool(java.lang.String) -> m
    java.lang.String getToolName() -> E
    int doWand(int,int,double,java.lang.String) -> a
    void setPasteMode(java.lang.String) -> n
    ij.ImagePlus getImage() -> F
    java.lang.String getVersion() -> G
    java.lang.String getDirectory(java.lang.String) -> o
    java.lang.String getIJDir() -> Q
    void open() -> H
    void open(java.lang.String) -> p
    void open(java.lang.String,int) -> a
    java.lang.String openUrlAsString(java.lang.String) -> q
    void save(java.lang.String) -> r
    void saveAs(java.lang.String,java.lang.String) -> j
    void saveAs(ij.ImagePlus,java.lang.String,java.lang.String) -> b
    java.lang.String updateExtension(java.lang.String,java.lang.String) -> m
    java.lang.String saveString(java.lang.String,java.lang.String) -> k
    java.lang.String append(java.lang.String,java.lang.String) -> l
    java.lang.String write(java.lang.String,java.lang.String,boolean) -> a
    java.lang.String openAsString(java.lang.String) -> s
    ij.ImagePlus createImage(java.lang.String,java.lang.String,int,int,int) -> a
    void newImage(java.lang.String,java.lang.String,int,int,int) -> b
    boolean escapePressed() -> I
    void resetEscape() -> J
    void redirectErrorMessages() -> K
    void redirectErrorMessages(boolean) -> a
    boolean redirectingErrorMessages() -> L
    java.lang.ClassLoader getClassLoader() -> M
    java.awt.Dimension getScreenSize() -> N
    void abort() -> R
    void setClassLoader(java.lang.ClassLoader) -> a
    void handleException(java.lang.Throwable) -> a
    void notifyEventListeners(int) -> f
ij.ImageJ -> ij.ImageJ:
    java.awt.Color backgroundColor -> a
    java.awt.Font SansSerif12 -> c
    int port -> d
    ij.gui.Toolbar toolbar -> e
    java.awt.Panel statusBar -> f
    ij.gui.ProgressBar progressBar -> g
    java.awt.Label statusLine -> h
    java.applet.Applet applet -> i
    java.util.Vector classes -> j
    boolean exitWhenQuitting -> k
    boolean quitting -> l
    long keyPressedTime -> m
    long actionPerformedTime -> n
    java.lang.String lastKeyCommand -> o
    boolean windowClosed -> p
    java.lang.String commandName -> q
    boolean hotkey -> b
    void showStatus(java.lang.String) -> a
    ij.gui.ProgressBar getProgressBar() -> a
    void doCommand(java.lang.String) -> b
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    java.lang.String version() -> e
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
    boolean deleteOverlayRoi(ij.ImagePlus) -> a
    boolean ignoreArrowKeys(ij.ImagePlus) -> b
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
    void windowClosing(java.awt.event.WindowEvent) -> windowClosing
    void windowActivated(java.awt.event.WindowEvent) -> windowActivated
    void windowClosed(java.awt.event.WindowEvent) -> windowClosed
    void windowDeactivated(java.awt.event.WindowEvent) -> windowDeactivated
    void windowDeiconified(java.awt.event.WindowEvent) -> windowDeiconified
    void windowIconified(java.awt.event.WindowEvent) -> windowIconified
    void windowOpened(java.awt.event.WindowEvent) -> windowOpened
    void register(java.lang.Class) -> a
    boolean quitting() -> b
    void savePreferences(java.util.Properties) -> a
    void main(java.lang.String[]) -> main
    int getPort() -> c
    void run() -> run
    java.lang.String getCommandName() -> d
    void setCommandName(java.lang.String) -> c
ij.ImageListener -> ij.e:
    void imageOpened$3225e243() -> a
    void imageClosed(ij.ImagePlus) -> a
    void imageUpdated(ij.ImagePlus) -> b
ij.ImagePlus -> ij.f:
    boolean changes -> a
    java.awt.Image img -> b
    ij.process.ImageProcessor ip -> c
    ij.gui.ImageWindow win -> d
    ij.gui.Roi roi -> h
    int currentSlice -> i
    boolean compositeImage -> e
    int width -> f
    int height -> g
    boolean locked -> j
    int nChannels -> k
    int nSlices -> l
    int nFrames -> m
    ij.ImageJ ij -> n
    java.lang.String title -> o
    ij.io.FileInfo fileInfo -> p
    int imageType -> q
    ij.ImageStack stack -> r
    int currentID -> s
    int ID -> t
    java.awt.Component comp -> u
    boolean imageLoaded -> v
    int imageUpdateY -> w
    int imageUpdateW -> x
    java.util.Properties properties -> y
    long startTime -> z
    ij.measure.Calibration calibration -> A
    ij.measure.Calibration globalCalibration -> B
    boolean activated -> C
    boolean errorLoadingImage -> D
    java.util.Vector listeners -> E
    boolean openAsHyperStack -> F
    int[] position -> G
    boolean noUpdateMode -> H
    ij.gui.ImageCanvas flatteningCanvas -> I
    ij.gui.Overlay overlay -> J
    boolean hideOverlay -> K
    int default16bitDisplayRange -> L
    long waitStart -> M
    int[] pvalue -> N
    int savex -> O
    int savey -> P
    boolean lock() -> s
    boolean lockSilently() -> t
    void unlock() -> u
    void waitForImage(java.awt.Image) -> a
    void showProgress(double) -> a
    void draw() -> v
    void draw(int,int,int,int) -> a
    void updateAndDraw() -> e
    void updateChannelAndDraw() -> b
    ij.process.LUT[] getLuts() -> l
    void repaintWindow() -> w
    void updateAndRepaintWindow() -> x
    void updateImage() -> f
    void hide() -> y
    void close() -> z
    void show() -> A
    void show(java.lang.String) -> a_
    void setActivated() -> B
    java.awt.Image getImage() -> a
    int getID() -> C
    void setProcessor(ij.process.ImageProcessor) -> a
    void setProcessor(java.lang.String,ij.process.ImageProcessor) -> a
    void setProcessor2(java.lang.String,ij.process.ImageProcessor,ij.ImageStack) -> a
    void setStack(ij.ImageStack) -> a
    void setStack(java.lang.String,ij.ImageStack) -> a
    void setFileInfo(ij.io.FileInfo) -> a
    ij.gui.ImageWindow getWindow() -> D
    void setWindow(ij.gui.ImageWindow) -> a
    ij.gui.ImageCanvas getCanvas() -> E
    void setColor(java.awt.Color) -> a
    void setupProcessor() -> c
    ij.process.ImageProcessor getProcessor() -> F
    void trimProcessor() -> G
    ij.process.ImageProcessor getMask() -> H
    ij.process.ImageStatistics getStatistics() -> I
    ij.process.ImageStatistics getStatistics(int) -> c
    ij.process.ImageStatistics getStatistics(int,int) -> a
    ij.process.ImageStatistics getStatistics(int,int,double,double) -> a
    java.lang.String getTitle() -> J
    void setTitle(java.lang.String) -> b
    int getWidth() -> K
    int getHeight() -> L
    int getStackSize() -> M
    int getImageStackSize() -> N
    void setDimensions(int,int,int) -> a
    boolean isHyperStack() -> O
    int getNDimensions() -> P
    boolean isDisplayedHyperStack() -> Q
    int getNChannels() -> R
    int getNSlices() -> S
    int getNFrames() -> T
    int[] getDimensions() -> U
    int[] getDimensions(boolean) -> a
    void verifyDimensions() -> d
    int getType() -> V
    int getBitDepth() -> W
    int getBytesPerPixel() -> X
    void setType(int) -> d
    void setProperty(java.lang.String,java.lang.Object) -> a
    java.lang.Object getProperty(java.lang.String) -> c
    ij.LookUpTable createLut() -> Y
    boolean isInvertedLut() -> Z
    int[] getPixel(int,int) -> b
    ij.ImageStack createEmptyStack() -> aa
    ij.ImageStack getStack() -> ab
    ij.ImageStack getImageStack() -> ac
    int getCurrentSlice() -> ad
    void setCurrentSlice(int) -> a
    int getChannel() -> ae
    int getSlice() -> af
    int getFrame() -> ag
    void setPosition(int,int,int) -> b
    void setPositionWithoutUpdate(int,int,int) -> c
    int getStackIndex(int,int,int) -> d
    void setPosition(int) -> e
    int[] convertIndexToPosition(int) -> f
    void setSlice(int) -> g
    void setSliceWithoutUpdate(int) -> h
    ij.gui.Roi getRoi() -> ah
    void setRoi(ij.gui.Roi) -> a
    void setRoi(ij.gui.Roi,boolean) -> a
    void setRoi(int,int,int,int) -> b
    void createNewRoi(int,int) -> c
    void deleteRoi() -> ai
    void saveRoi() -> aj
    ij.io.FileInfo getFileInfo() -> ak
    ij.io.FileInfo getOriginalFileInfo() -> al
    boolean imageUpdate(java.awt.Image,int,int,int,int,int) -> imageUpdate
    void flush() -> am
    ij.ImagePlus createImagePlus() -> an
    void startTiming() -> ao
    long getStartTime() -> ap
    ij.measure.Calibration getCalibration() -> aq
    void setCalibration(ij.measure.Calibration) -> a
    void setGlobalCalibration(ij.measure.Calibration) -> b
    ij.measure.Calibration getGlobalCalibration() -> ar
    ij.measure.Calibration getLocalCalibration() -> as
    void mouseMoved(int,int) -> d
    void updateStatusbarValue() -> at
    java.lang.String getLocationAsString(int,int) -> e
    java.lang.String d2s(double) -> b
    java.lang.String getValueAsString(int,int) -> f
    void notifyListeners(int) -> i
    void addImageListener(ij.ImageListener) -> a
    void removeImageListener(ij.ImageListener) -> b
    boolean isLocked() -> au
    void setOpenAsHyperStack(boolean) -> b
    boolean getOpenAsHyperStack() -> av
    boolean isComposite() -> aw
    void setDisplayRange(double,double) -> a
    double getDisplayRangeMin() -> n
    double getDisplayRangeMax() -> o
    void setDisplayRange(double,double,int) -> a
    void resetDisplayRange() -> p
    void setDefault16bitRange(int) -> j
    int getDefault16bitRange() -> ax
    void updatePosition(int,int,int) -> e
    ij.ImagePlus flatten() -> ay
    void setOverlay(ij.gui.Overlay) -> a
    void setOverlay(java.awt.Shape,java.awt.Color,java.awt.BasicStroke) -> a
    ij.gui.Overlay getOverlay() -> az
    boolean getHideOverlay() -> aA
    java.lang.Object clone() -> clone
    java.lang.String toString() -> toString
ij.ImageStack -> ij.g:
    int type -> a
    int nSlices -> b
    java.lang.Object[] stack -> c
    java.lang.String[] label -> d
    int width -> e
    int height -> f
    java.awt.image.ColorModel cm -> g
    double min -> h
    double max -> i
    float[] cTable -> j
    void addSlice(java.lang.String,java.lang.Object) -> a
    void addSlice(java.lang.String,ij.process.ImageProcessor) -> a
    void deleteSlice(int) -> a
    void deleteLastSlice() -> a
    int getWidth() -> b
    int getHeight() -> c
    void update(ij.process.ImageProcessor) -> a
    java.lang.Object getPixels(int) -> b
    void setPixels(java.lang.Object,int) -> a
    java.lang.Object[] getImageArray() -> d
    int getSize() -> e
    java.lang.String[] getSliceLabels() -> f
    java.lang.String getSliceLabel(int) -> c
    java.lang.String getShortSliceLabel(int) -> d
    void setSliceLabel(java.lang.String,int) -> a
    ij.process.ImageProcessor getProcessor(int) -> e
    void setColorModel(java.awt.image.ColorModel) -> a
    boolean isRGB() -> g
    boolean isHSB() -> h
    boolean isVirtual() -> i
    void trim() -> j
    java.lang.String toString() -> toString
ij.LookUpTable -> ij.h:
    int mapSize -> a
    java.awt.image.ColorModel cm -> b
    byte[] rLUT -> c
    byte[] gLUT -> d
    byte[] bLUT -> e
    void getColors(java.awt.image.ColorModel) -> a
    int getMapSize() -> a
    byte[] getReds() -> b
    byte[] getGreens() -> c
    byte[] getBlues() -> d
    java.awt.image.ColorModel getColorModel() -> e
    boolean isGrayscale() -> f
    void drawUnscaledColorBar(ij.process.ImageProcessor,int,int,int,int) -> a
    java.awt.image.ColorModel createGrayscaleColorModel(boolean) -> a
    void center(java.awt.Window) -> a
    java.lang.String getTag(ij.ImagePlus,java.lang.String) -> a
ij.Macro -> ij.i:
    java.util.Hashtable table -> b
    boolean abort -> a
    void abort() -> a
    java.lang.String getOptions() -> b
    void setOptions(java.lang.String) -> a
    java.lang.String getValue(java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.String trimKey(java.lang.String) -> b
ij.Menus -> ij.j:
    java.awt.MenuBar mbar -> e
    java.awt.CheckboxMenuItem gray8Item -> f
    java.awt.CheckboxMenuItem gray16Item -> g
    java.awt.CheckboxMenuItem gray32Item -> h
    java.awt.CheckboxMenuItem color256Item -> i
    java.awt.CheckboxMenuItem colorRGBItem -> j
    java.awt.CheckboxMenuItem RGBStackItem -> k
    java.awt.CheckboxMenuItem HSBStackItem -> l
    java.awt.PopupMenu popup -> m
    ij.ImageJ ij -> n
    java.applet.Applet applet -> o
    java.lang.String pluginsPath -> p
    java.lang.String macrosPath -> q
    java.util.Properties menus -> r
    java.util.Properties menuSeparators -> s
    java.awt.Menu pluginsMenu -> t
    java.awt.Menu shortcutsMenu -> u
    java.awt.Menu utilitiesMenu -> v
    java.awt.Menu macrosMenu -> w
    java.awt.Menu window -> a
    java.awt.Menu openRecentMenu -> b
    java.util.Hashtable pluginsTable -> x
    int nPlugins -> y
    int nMacros -> z
    java.util.Hashtable shortcuts -> A
    java.util.Hashtable macroShortcuts -> B
    java.util.Vector pluginsPrefs -> C
    int windowMenuItems2 -> c
    java.lang.String error -> D
    java.lang.String jarError -> E
    boolean isJarErrorHeading -> F
    boolean installingJars -> G
    boolean duplicateCommand -> H
    java.util.Vector jarFiles -> I
    java.util.Map menuEntry2jarFile -> J
    java.util.Vector macroFiles -> K
    int userPluginsIndex -> L
    boolean addSorted -> M
    int defaultFontSize -> N
    int fontSize -> O
    java.awt.Font menuFont -> P
    boolean jnlp -> d
    java.lang.String addMenuBar() -> a
    void addOpenRecentSubMenu(java.awt.Menu) -> a
    void addItem(java.awt.Menu,java.lang.String,int,boolean) -> a
    void addPlugInItem(java.awt.Menu,java.lang.String,java.lang.String,int,boolean) -> a
    java.awt.CheckboxMenuItem addCheckboxItem(java.awt.Menu,java.lang.String,java.lang.String) -> a
    java.awt.Menu addSubMenu(java.awt.Menu,java.lang.String) -> a
    void addLuts(java.awt.Menu) -> b
    void addPluginItem(java.awt.Menu,java.lang.String) -> b
    void addPluginsMenu() -> q
    void installPlugins() -> r
    void installMacros() -> s
    int addPluginSeparatorIfNeeded(java.awt.Menu) -> c
    void addOrdered(java.awt.Menu,java.awt.MenuItem) -> a
    void installJarPlugins() -> t
    java.awt.Menu getMenu(java.lang.String,boolean) -> a
    java.awt.Menu getPluginsSubmenu(java.lang.String) -> c
    void addItemSorted(java.awt.Menu,java.awt.MenuItem,int) -> a
    java.io.InputStream getConfigurationFile(java.lang.String) -> d
    java.io.InputStream autoGenerateConfigFile(java.lang.String) -> e
    java.lang.String[] getStrippedPlugins(java.lang.String[]) -> a
    java.lang.String[] getPlugins() -> u
    void checkSubdirectory(java.lang.String,java.lang.String,java.util.Vector) -> a
    void installSubdirectorMacros(java.io.File,java.lang.String) -> a
    void installPopupMenu(ij.ImageJ) -> a
    java.awt.MenuBar getMenuBar() -> b
    java.awt.Menu getMacrosMenu() -> c
    int getMacroCount() -> d
    int getPluginCount() -> e
    void updateMenus() -> f
    java.lang.String getPlugInsPath() -> g
    java.lang.String getMacrosPath() -> h
    java.util.Hashtable getCommands() -> i
    java.util.Hashtable getShortcuts() -> j
    java.util.Hashtable getMacroShortcuts() -> k
    void insertWindowMenuItem(java.awt.Frame) -> a
    void addWindowMenuItem(ij.ImagePlus) -> a
    void removeWindowMenuItem(int) -> a
    void updateWindowMenuItem(java.lang.String,java.lang.String) -> a
    void addOpenRecentItem(java.lang.String) -> a
    java.awt.PopupMenu getPopupMenu() -> l
    int convertShortcutToCode(java.lang.String) -> b
    void installStartupMacroSet() -> m
    int getFontSize() -> n
    java.awt.Font getFont() -> o
    void savePreferences(java.util.Properties) -> a
    void updateImageJMenus() -> p
ij.OtherInstance -> ij.k:
    ij.OtherInstance$ImageJInstance stub -> a
    ij.OtherInstance$ImageJInstance implementation$3f0ad388 -> b
    java.lang.String getStubPath() -> a
    void makeFilePrivate(java.lang.String) -> a
    boolean sendArguments(java.lang.String[]) -> a
    int getInt(java.util.Properties,java.lang.String) -> a
    java.util.Properties loadPrefs() -> b
ij.OtherInstance$ImageJInstance -> ij.l:
    void sendArgument(java.lang.String) -> a
ij.Prefs -> ij.m:
    java.lang.String separator -> a
    boolean usePointerCursor -> b
    boolean antialiasedText -> H
    boolean interpolateScaledImages -> c
    boolean open100Percent -> d
    boolean blackBackground -> e
    boolean useJFileChooser -> f
    boolean weightedColor -> g
    boolean blackCanvas -> h
    boolean pointAutoMeasure -> i
    boolean pointAutoNextSlice -> j
    boolean requireControlKey -> k
    boolean useInvertingLut -> l
    boolean antialiasedTools -> m
    boolean intelByteOrder -> n
    boolean doubleBuffer -> o
    boolean noPointLabels -> p
    boolean disableUndo -> q
    boolean noBorder -> r
    boolean showAllSliceOnly -> s
    boolean copyColumnHeaders -> t
    boolean noRowNumbers -> u
    boolean moveToMisc -> v
    boolean pointAddToManager -> w
    boolean runSocketListener -> I
    boolean multiPointMode -> x
    boolean rotateYZ -> J
    boolean flipXZ -> K
    boolean dontSaveHeaders -> y
    boolean dontSaveRowNumbers -> z
    boolean noClickToGC -> A
    boolean reflexAngle -> B
    boolean avoidResliceInterpolation -> L
    boolean keepUndoBuffers -> C
    boolean useNamesAsLabels -> D
    boolean useSystemProxies -> E
    boolean useFileChooser -> M
    boolean subPixelResolution -> F
    java.util.Properties ijPrefs -> N
    java.util.Properties props -> O
    java.lang.String prefsDir -> P
    java.lang.String imagesURL -> Q
    java.lang.String homeDir -> R
    int threads -> S
    boolean commandLineMacro -> G
    java.lang.String load(java.lang.Object,java.applet.Applet) -> a
    java.lang.String loadAppletProps(java.io.InputStream,java.applet.Applet) -> a
    java.lang.String getImagesURL() -> a
    java.lang.String getHomeDir() -> b
    java.lang.String getPrefsDir() -> c
    void setHomeDir(java.lang.String) -> a
    java.lang.String getDefaultDirectory() -> d
    java.lang.String getString(java.lang.String) -> b
    int getInt(java.lang.String,int) -> a
    double getDouble(java.lang.String,double) -> a
    java.awt.Color getColor(java.lang.String,java.awt.Color) -> a
    boolean loadPrefs(java.lang.String) -> d
    void savePreferences() -> e
    void set(java.lang.String,java.lang.String) -> a
    void set(java.lang.String,int) -> b
    void set(java.lang.String,double) -> b
    void set(java.lang.String,boolean) -> a
    java.lang.String get(java.lang.String,java.lang.String) -> b
    double get(java.lang.String,double) -> c
    boolean get(java.lang.String,boolean) -> b
    void saveLocation(java.lang.String,java.awt.Point) -> a
    java.awt.Point getLocation(java.lang.String) -> c
    void savePluginPrefs(java.util.Properties) -> a
    int getThreads() -> f
    void setThreads(int) -> a
ij.RecentOpener -> ij.n:
    java.lang.String path -> a
    void run() -> run
ij.Undo -> ij.o:
    int whatToUndo -> a
    ij.gui.Roi roiCopy -> b
    void setup(int,ij.ImagePlus) -> a
    void reset() -> a
ij.VirtualStack -> ij.p:
    int nSlices -> a
    void addSlice(java.lang.String,java.lang.Object) -> a
    void addSlice(java.lang.String,ij.process.ImageProcessor) -> a
    void deleteSlice(int) -> a
    void deleteLastSlice() -> a
    java.lang.Object getPixels(int) -> b
    void setPixels(java.lang.Object,int) -> a
    ij.process.ImageProcessor getProcessor(int) -> e
    int getSize() -> e
    java.lang.String getSliceLabel(int) -> c
    java.lang.Object[] getImageArray() -> d
    void setSliceLabel(java.lang.String,int) -> a
    boolean isVirtual() -> i
    void trim() -> j
ij.WindowManager -> ij.q:
    boolean checkForDuplicateName -> a
    java.util.Vector imageList -> b
    java.util.Vector nonImageList -> c
    ij.gui.ImageWindow currentWindow -> d
    java.awt.Frame frontWindow -> e
    java.util.Hashtable tempImageTable -> f
    void setCurrentWindow(ij.gui.ImageWindow) -> a
    ij.gui.ImageWindow getCurrentWindow() -> a
    int getCurrentIndex() -> b
    ij.ImagePlus getCurrentImage() -> c
    void setTempCurrentImage(ij.ImagePlus) -> a
    void setTempCurrentImage(java.lang.Thread,ij.ImagePlus) -> a
    int getWindowCount() -> d
    int getImageCount() -> e
    java.awt.Frame getFrontWindow() -> f
    int[] getIDList() -> g
    java.awt.Frame[] getNonImageWindows() -> h
    ij.ImagePlus getImage(int) -> a
    int getNthImageID(int) -> b
    ij.ImagePlus getImage(java.lang.String) -> a
    void addWindow(java.awt.Frame) -> a
    boolean isDuplicateName(java.lang.String) -> e
    java.lang.String getUniqueName(java.lang.String) -> b
    java.lang.String makeUniqueName(java.lang.String) -> c
    void removeWindow(java.awt.Frame) -> b
    void setWindow(java.awt.Frame) -> c
    boolean closeAllWindows() -> i
    void putBehind() -> j
    ij.ImagePlus getTempCurrentImage() -> k
    java.awt.Frame getFrame(java.lang.String) -> d
    void activateWindow(java.lang.String,java.awt.MenuItem) -> a
    void repaintImageWindows() -> l
    void toFront(java.awt.Frame) -> d
ij.gui.Arrow -> ij.a.a:
    int defaultStyle -> aj
    float defaultWidth -> ak
    double defaultHeadSize -> al
    boolean defaultDoubleHeaded -> am
    boolean defaultOutline -> an
    int style -> ao
    double headSize -> ap
    boolean doubleHeaded -> aq
    boolean outline -> ar
    float[] points -> as
    java.awt.geom.GeneralPath path -> at
    java.awt.Stroke defaultStroke -> au
    double headShaftRatio -> av
    void draw(java.awt.Graphics) -> a
    void flipEnds() -> n
    java.awt.Shape getPath() -> o
    java.awt.Shape getShape() -> p
    ij.gui.ShapeRoi getShapeRoi() -> q
    ij.process.ImageProcessor getMask() -> a
    double getOutlineWidth() -> r
    void drawPixels(ij.process.ImageProcessor) -> a
    boolean contains(int,int) -> a
    java.awt.Rectangle getBounds() -> b
    void handleMouseDown(int,int) -> b
    int clipRectMargin() -> c
    boolean isDrawingTool() -> d
    void setStyle(int) -> a
    int getStyle() -> a_
    void setHeadSize(double) -> a
    double getHeadSize() -> f
    void setDoubleHeaded(boolean) -> a
    boolean getDoubleHeaded() -> g
    void setOutline(boolean) -> b
    boolean getOutline() -> h
ij.gui.ColorChooser -> ij.a.b:
    java.util.Vector colors -> a
    java.util.Vector sliders -> b
    ij.gui.ColorPanel panel -> c
    java.awt.Color initialColor -> d
    int red -> e
    int green -> f
    int blue -> g
    java.lang.String title -> h
    java.awt.Frame frame -> i
    java.awt.Color getColor() -> a
    void textValueChanged(java.awt.event.TextEvent) -> textValueChanged
    void adjustmentValueChanged(java.awt.event.AdjustmentEvent) -> adjustmentValueChanged
ij.gui.ColorPanel -> ij.a.c:
    java.awt.Font font -> a
    java.awt.Color c -> b
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    void setColor(java.awt.Color) -> a
    java.awt.Dimension getMinimumSize() -> getMinimumSize
    void paint(java.awt.Graphics) -> paint
ij.gui.DialogListener -> ij.a.d:
    boolean dialogItemChanged(ij.gui.GenericDialog,java.awt.AWTEvent) -> a
ij.gui.EllipseRoi -> ij.a.e:
    double defaultRatio -> h
    double xstart -> i
    double ystart -> j
    double aspectRatio -> k
    int[] handle -> l
    void draw(java.awt.Graphics) -> a
    void grow(int,int) -> c
    void makeEllipse(double,double,double,double) -> b
    void handleMouseUp(int,int) -> d
    void moveHandle(int,int) -> e
    void updateRatio(double,double,double,double,double) -> a
    int isHandle(int,int) -> f
    double getLength() -> e
    double[] getParams() -> f
    double[] getFeretValues() -> b_
    boolean subPixelResolution() -> c_
ij.gui.FreehandRoi -> ij.a.f:
    void grow(int,int) -> c
    void drawLine() -> f
    void handleMouseUp(int,int) -> d
ij.gui.GenericDialog -> ij.a.g:
    java.util.Vector numberField -> a
    java.util.Vector stringField -> b
    java.util.Vector checkbox -> c
    java.util.Vector choice -> d
    java.util.Vector slider -> e
    java.util.Vector defaultValues -> f
    java.util.Vector defaultText -> g
    java.awt.Component theLabel -> h
    java.awt.Button cancel -> i
    java.awt.Button okay -> j
    java.awt.Button no -> k
    java.awt.Button help -> l
    java.lang.String okLabel -> m
    java.lang.String cancelLabel -> n
    java.lang.String helpLabel -> o
    boolean wasCanceled -> p
    boolean wasOKed -> q
    int y -> r
    int nfIndex -> s
    int sfIndex -> t
    int cbIndex -> u
    int choiceIndex -> v
    java.awt.GridBagLayout grid -> w
    java.awt.GridBagConstraints c -> x
    boolean firstNumericField -> y
    boolean invalidNumber -> z
    boolean firstPaint -> A
    java.util.Hashtable labels -> B
    boolean macro -> C
    java.lang.String macroOptions -> D
    int topInset -> E
    int leftInset -> F
    int bottomInset -> G
    boolean customInsets -> H
    int[] sliderIndexes -> I
    double[] sliderScales -> J
    java.awt.Checkbox previewCheckbox -> K
    java.util.Vector dialogListeners -> L
    ij.plugin.filter.PlugInFilterRunner pfr -> M
    java.lang.String previewLabel -> N
    boolean recorderOn -> O
    char echoChar -> P
    boolean hideCancelButton -> Q
    boolean centerDialog -> R
    java.lang.String helpURL -> S
    void addNumericField(java.lang.String,double,int) -> a
    void addNumericField(java.lang.String,double,int,int,java.lang.String) -> a
    java.awt.Label makeLabel(java.lang.String) -> g
    void saveLabel(java.awt.Component,java.lang.String) -> a
    void addStringField(java.lang.String,java.lang.String) -> a
    void addStringField(java.lang.String,java.lang.String,int) -> a
    void addCheckbox(java.lang.String,boolean) -> a
    void addCheckbox(java.lang.String,boolean,boolean) -> a
    void addPreviewCheckbox(ij.plugin.filter.PlugInFilterRunner) -> a
    void addCheckboxGroup(int,int,java.lang.String[],boolean[]) -> a
    void addChoice(java.lang.String,java.lang.String[],java.lang.String) -> a
    void addMessage(java.lang.String) -> a
    void addMessage(java.lang.String,java.awt.Font) -> a
    void addSlider(java.lang.String,double,double,double) -> a
    void addPanel(java.awt.Panel,int,java.awt.Insets) -> a
    void setInsets(int,int,int) -> a
    void setOKLabel(java.lang.String) -> b
    void setCancelLabel(java.lang.String) -> c
    void setHelpLabel(java.lang.String) -> d
    void hideCancelButton() -> a
    java.awt.Insets getInsets(int,int,int,int) -> a
    void addDialogListener(ij.gui.DialogListener) -> a
    boolean wasCanceled() -> b
    boolean wasOKed() -> c
    double getNextNumber() -> d
    void recordOption(java.awt.Component,java.lang.String) -> b
    java.lang.Double getValue(java.lang.String) -> h
    double parseDouble(java.lang.String) -> e
    boolean invalidNumber() -> e
    java.lang.String getNextString() -> f
    boolean getNextBoolean() -> g
    boolean isMatch(java.lang.String,java.lang.String) -> b
    java.lang.String getNextChoice() -> h
    int getNextChoiceIndex() -> i
    java.lang.String getChoiceVariable(java.lang.String) -> i
    void showDialog() -> j
    void resetCounters() -> p
    java.util.Vector getNumericFields() -> k
    java.util.Vector getCheckboxes() -> l
    java.util.Vector getChoices() -> m
    java.util.Vector getSliders() -> n
    java.awt.Checkbox getPreviewCheckbox() -> o
    void previewRunning(boolean) -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void textValueChanged(java.awt.event.TextEvent) -> textValueChanged
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
    void focusGained(java.awt.event.FocusEvent) -> focusGained
    void focusLost(java.awt.event.FocusEvent) -> focusLost
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
    java.awt.Insets getInsets() -> getInsets
    void adjustmentValueChanged(java.awt.event.AdjustmentEvent) -> adjustmentValueChanged
    void notifyListeners(java.awt.AWTEvent) -> a
    void paint(java.awt.Graphics) -> paint
    void windowClosing(java.awt.event.WindowEvent) -> windowClosing
    void addHelp(java.lang.String) -> f
    void windowActivated(java.awt.event.WindowEvent) -> windowActivated
    void windowOpened(java.awt.event.WindowEvent) -> windowOpened
    void windowClosed(java.awt.event.WindowEvent) -> windowClosed
    void windowIconified(java.awt.event.WindowEvent) -> windowIconified
    void windowDeiconified(java.awt.event.WindowEvent) -> windowDeiconified
    void windowDeactivated(java.awt.event.WindowEvent) -> windowDeactivated
ij.gui.HTMLDialog -> ij.a.h:
    boolean escapePressed -> a
    void init(java.lang.String) -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
    boolean escapePressed() -> a
ij.gui.HistogramWindow -> ij.a.i:
    ij.process.ImageStatistics stats -> g
    long[] histogram -> h
    ij.LookUpTable lut -> i
    java.awt.Rectangle frame -> j
    java.awt.Button list -> k
    java.awt.Button copy -> l
    java.awt.Button log -> m
    java.awt.Button live -> n
    java.awt.Button rgb -> o
    java.awt.Label value -> p
    java.awt.Label count -> q
    int decimalPlaces -> r
    int digits -> s
    long newMaxCount -> t
    boolean logScale -> u
    ij.measure.Calibration cal -> v
    int srcImageID -> w
    ij.ImagePlus srcImp -> x
    java.lang.Thread bgThread -> y
    boolean doUpdate -> z
    int channel -> A
    java.lang.String blankLabel -> B
    void showHistogram(ij.ImagePlus,int) -> a
    void showHistogram(ij.ImagePlus,int,double,double) -> a
    void mouseMoved(int,int) -> a
    void drawHistogram(ij.ImagePlus,ij.process.ImageProcessor,boolean,double,double) -> a
    int scaleDown(ij.process.ImageProcessor,double) -> a
    void drawPlot(long,ij.process.ImageProcessor) -> a
    void drawLogPlot(long,ij.process.ImageProcessor) -> b
    java.lang.String d2s(double) -> a
    void showList() -> k
    void copyToClipboard() -> l
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void lostOwnership(java.awt.datatransfer.Clipboard,java.awt.datatransfer.Transferable) -> lostOwnership
    int[] getHistogram() -> b
    double[] getXValues() -> c
    boolean liveMode() -> m
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseDragged(java.awt.event.MouseEvent) -> mouseDragged
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseMoved(java.awt.event.MouseEvent) -> mouseMoved
    void imageOpened$3225e243() -> a
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
    void imageUpdated(ij.ImagePlus) -> b
    void imageClosed(ij.ImagePlus) -> a
    void run() -> run
    void removeListeners() -> n
ij.gui.ImageCanvas -> ij.a.j:
    java.awt.Cursor defaultCursor -> a
    java.awt.Cursor handCursor -> b
    java.awt.Cursor moveCursor -> c
    java.awt.Cursor crosshairCursor -> d
    ij.ImagePlus imp -> e
    boolean imageUpdated -> f
    java.awt.Rectangle srcRect -> g
    int imageWidth -> h
    int imageHeight -> i
    int xMouse -> j
    int yMouse -> k
    boolean showCursorStatus -> l
    int sx2 -> m
    int sy2 -> n
    boolean disablePopupMenu -> o
    java.awt.Color zoomIndicatorColor -> p
    java.awt.Font smallFont -> q
    java.awt.Font largeFont -> r
    java.awt.Font font -> s
    java.awt.Rectangle[] labelRects -> t
    boolean maxBoundsReset -> u
    ij.gui.Overlay overlay -> v
    ij.gui.Overlay showAllOverlay -> w
    java.awt.Color showAllColor -> x
    java.awt.Color defaultColor -> y
    java.awt.Color labelColor -> z
    java.awt.Color bgColor -> A
    int resetMaxBoundsCount -> B
    ij.gui.Roi currentRoi -> C
    int mousePressedX -> D
    int mousePressedY -> E
    long mousePressedTime -> F
    boolean overOverlayLabel -> G
    ij.ImageJ ij -> H
    double magnification -> I
    int dstWidth -> J
    int dstHeight -> K
    int xMouseStart -> L
    int yMouseStart -> M
    int xSrcStart -> N
    int ySrcStart -> O
    int flags -> P
    java.awt.Image offScreenImage -> Q
    int offScreenWidth -> R
    int offScreenHeight -> S
    boolean customRoi -> T
    boolean drawNames -> U
    long firstFrame -> V
    int frames -> W
    int fps -> X
    double[] zoomLevels -> Y
    void updateImage(ij.ImagePlus) -> a
    void update(ij.gui.ImageCanvas) -> a
    void setSrcRect(java.awt.Rectangle) -> a
    java.awt.Rectangle getSrcRect() -> a
    void setDrawingSize(int,int) -> a
    void setImageUpdated() -> b
    void update(java.awt.Graphics) -> update
    void paint(java.awt.Graphics) -> paint
    void setInterpolation(java.awt.Graphics,boolean) -> a
    void drawRoi(ij.gui.Roi,java.awt.Graphics) -> a
    void drawOverlay(ij.gui.Overlay,java.awt.Graphics) -> a
    void drawRoi(java.awt.Graphics,ij.gui.Roi,int) -> a
    void drawZoomIndicator(java.awt.Graphics) -> a
    void showFrameRate(java.awt.Graphics) -> b
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    java.awt.Point getCursorLoc() -> c
    int getModifiers() -> d
    ij.ImagePlus getImage() -> e
    void setCursor(int,int,int,int) -> a
    int offScreenX(int) -> a
    int offScreenY(int) -> b
    double offScreenXD(int) -> c
    double offScreenYD(int) -> d
    int screenX(int) -> e
    int screenY(int) -> f
    int screenXD(double) -> a
    int screenYD(double) -> b
    double getMagnification() -> f
    void setMagnification(double) -> c
    void setMagnification2(double) -> d
    void resizeCanvas(int,int) -> b
    void fitToWindow() -> g
    void setMaxBounds() -> h
    void resetMaxBounds() -> p
    double getLowerZoomLevel(double) -> e
    void zoomIn(int,int) -> c
    void adjustSourceRect(double,int,int) -> a
    void zoomOut(int,int) -> d
    void unzoom() -> i
    java.awt.Color getColor(int) -> g
    void setDrawingColor(int,int,boolean) -> a
    void setForegroundColor(java.awt.Color) -> b
    void setBackgroundColor(java.awt.Color) -> c
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    boolean drawingTool() -> q
    void setupScroll(int,int) -> e
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mouseDragged(java.awt.event.MouseEvent) -> mouseDragged
    void handleRoiMouseDown(java.awt.event.MouseEvent) -> a
    void setRoiModState(java.awt.event.MouseEvent,ij.gui.Roi,int) -> a
    void disablePopupMenu(boolean) -> a
    void setShowAllList(ij.gui.Overlay) -> a
    ij.gui.Overlay getShowAllList() -> j
    void setShowAllROIs(boolean) -> b
    boolean getShowAllROIs() -> k
    java.awt.Color getShowAllColor() -> l
    void setShowAllColor(java.awt.Color) -> a
    void setCursor$480a794b(java.awt.Cursor) -> a
    void setOverlay(ij.gui.Overlay) -> b
    ij.gui.Overlay getOverlay() -> m
    java.util.Vector getDisplayList() -> n
    void setCustomRoi(boolean) -> c
    boolean getCustomRoi() -> o
    void setShowCursorStatus(boolean) -> d
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    boolean activateOverlayRoi(int,int) -> f
    boolean roiManagerSelect(ij.gui.Roi,boolean) -> a
    void mouseMoved(java.awt.event.MouseEvent) -> mouseMoved
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
ij.gui.ImageLayout -> ij.a.k:
    int hgap -> a
    int vgap -> b
    ij.gui.ImageCanvas ic -> c
    void addLayoutComponent(java.lang.String,java.awt.Component) -> addLayoutComponent
    void removeLayoutComponent(java.awt.Component) -> removeLayoutComponent
    java.awt.Dimension preferredLayoutSize(java.awt.Container) -> preferredLayoutSize
    java.awt.Dimension minimumLayoutSize(java.awt.Container) -> minimumLayoutSize
    void layoutContainer(java.awt.Container) -> layoutContainer
ij.gui.ImageRoi -> ij.a.l:
    java.awt.Image img -> a
    java.awt.Composite composite -> b
    double opacity -> c
    double angle -> d
    void draw(java.awt.Graphics) -> a
    void setOpacity(double) -> a
    byte[] getSerializedImage() -> f
    double getOpacity() -> i
    java.lang.Object clone() -> clone
ij.gui.ImageWindow -> ij.a.m:
    ij.ImagePlus imp -> a
    ij.ImageJ ij -> g
    ij.gui.ImageCanvas ic -> h
    double initialMagnification -> i
    boolean closed -> j
    boolean newCanvas -> k
    boolean unzoomWhenMinimizing -> l
    java.awt.Rectangle maxWindowBounds -> b
    java.awt.Rectangle maxBounds -> c
    long setMaxBoundsTime -> d
    int xbase -> m
    int ybase -> n
    int xloc -> o
    int yloc -> p
    int count -> q
    boolean centerOnScreen -> r
    java.awt.Point nextLocation -> s
    int textGap -> t
    boolean running -> e
    boolean running2 -> f
    void setLocationAndSize(boolean) -> a
    java.awt.Rectangle getMaxWindow(int,int) -> b
    java.awt.Rectangle getSecondaryMonitorBounds(java.awt.GraphicsEnvironment,int,int) -> a
    double getInitialMagnification() -> d
    java.awt.Insets getInsets() -> getInsets
    java.lang.String createSubtitle() -> e
    void paint(java.awt.Graphics) -> paint
    boolean close() -> f
    ij.ImagePlus getImagePlus() -> g
    void updateImage(ij.ImagePlus) -> c
    ij.gui.ImageCanvas getCanvas() -> h
    java.awt.Rectangle getMaximumBounds() -> a
    java.awt.Dimension getExtraSize() -> b
    java.awt.Component add(java.awt.Component) -> add
    boolean isClosed() -> i
    void focusGained(java.awt.event.FocusEvent) -> focusGained
    void windowActivated(java.awt.event.WindowEvent) -> windowActivated
    void windowClosing(java.awt.event.WindowEvent) -> windowClosing
    void windowStateChanged(java.awt.event.WindowEvent) -> windowStateChanged
    void windowClosed(java.awt.event.WindowEvent) -> windowClosed
    void windowDeactivated(java.awt.event.WindowEvent) -> windowDeactivated
    void focusLost(java.awt.event.FocusEvent) -> focusLost
    void windowDeiconified(java.awt.event.WindowEvent) -> windowDeiconified
    void windowIconified(java.awt.event.WindowEvent) -> windowIconified
    void windowOpened(java.awt.event.WindowEvent) -> windowOpened
    void mouseWheelMoved(java.awt.event.MouseWheelEvent) -> mouseWheelMoved
    void mouseMoved(int,int) -> a
    java.lang.String toString() -> toString
    void centerNextImage() -> j
    void setNextLocation(java.awt.Point) -> a
    void setLocationAndSize(int,int,int,int) -> a
ij.gui.Line -> ij.a.n:
    int x1 -> a
    int y1 -> b
    int x2 -> c
    int y2 -> d
    double x1d -> e
    double y1d -> f
    double x2d -> g
    double y2d -> h
    double x1R -> i
    double y1R -> j
    double x2R -> k
    double y2R -> l
    double startxd -> m
    double startyd -> n
    boolean drawOffset -> aj
    double[] PI_SEARCH -> ak
    double[] PI_MULT -> al
    void grow(int,int) -> c
    void move(int,int) -> g
    void moveHandle(int,int) -> e
    void mouseDownInHandle(int,int,int) -> a
    void draw(java.awt.Graphics) -> a
    double getLength() -> e
    double[] getPixels() -> i
    java.awt.Polygon getPolygon() -> j
    ij.process.FloatPolygon getFloatPolygon() -> k
    void drawPixels(ij.process.ImageProcessor) -> a
    boolean contains(int,int) -> a
    void handleMouseDown(int,int) -> b
    int isHandle(int,int) -> f
    double getOffset(double) -> a
    int getWidth() -> l
    void setWidth(int) -> b
    void setStrokeWidth(float) -> a
    java.awt.Rectangle getBounds() -> b
    int clipRectMargin() -> c
    void nudgeCorner(int) -> c
    boolean getDrawOffset() -> m
    void setDrawOffset(boolean) -> c
ij.gui.MessageDialog -> ij.a.o:
    java.awt.Button button -> a
    ij.gui.MultiLineLabel label -> b
    boolean escapePressed -> c
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
    void windowClosing(java.awt.event.WindowEvent) -> windowClosing
    boolean escapePressed() -> a
    void windowActivated(java.awt.event.WindowEvent) -> windowActivated
    void windowOpened(java.awt.event.WindowEvent) -> windowOpened
    void windowClosed(java.awt.event.WindowEvent) -> windowClosed
    void windowIconified(java.awt.event.WindowEvent) -> windowIconified
    void windowDeiconified(java.awt.event.WindowEvent) -> windowDeiconified
    void windowDeactivated(java.awt.event.WindowEvent) -> windowDeactivated
ij.gui.MultiLineLabel -> ij.a.p:
    java.lang.String[] lines -> a
    int num_lines -> b
    int margin_width -> c
    int margin_height -> d
    int line_height -> e
    int line_ascent -> f
    int[] line_widths -> g
    int min_width -> h
    int max_width -> i
    void measure() -> a
    void setFont(java.awt.Font) -> setFont
    void addNotify() -> addNotify
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    java.awt.Dimension getMinimumSize() -> getMinimumSize
    void paint(java.awt.Graphics) -> paint
ij.gui.NewImage -> ij.a.q:
    int width -> a
    int height -> b
    int slices -> c
    int type -> d
    int fillWith -> e
    boolean createStack(ij.ImagePlus,ij.process.ImageProcessor,int,int,int) -> a
    int getFill(int) -> a
    int getSize(int,int) -> a
    ij.ImagePlus createImage(java.lang.String,int,int,int,int,int) -> a
    void savePreferences(java.util.Properties) -> a
ij.gui.NonBlockingGenericDialog -> ij.a.r:
    void showDialog() -> j
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
    void windowClosing(java.awt.event.WindowEvent) -> windowClosing
ij.gui.OvalRoi -> ij.a.s:
    void moveHandle(int,int) -> e
    void draw(java.awt.Graphics) -> a
    void drawPixels(ij.process.ImageProcessor) -> a
    java.awt.Polygon getPolygon() -> j
    boolean contains(int,int) -> a
    int isHandle(int,int) -> f
    ij.process.ImageProcessor getMask() -> a
    double getLength() -> e
ij.gui.Overlay -> ij.a.t:
    java.util.Vector list -> a
    boolean label -> b
    boolean drawNames -> c
    boolean drawBackgrounds -> d
    java.awt.Color labelColor -> e
    java.awt.Font labelFont -> f
    void add(ij.gui.Roi) -> a
    void remove(int) -> a
    ij.gui.Roi get(int) -> b
    boolean contains(ij.gui.Roi) -> b
    int size() -> a
    ij.gui.Roi[] toArray() -> b
    ij.gui.Overlay duplicate() -> c
    java.lang.String toString() -> toString
    void drawLabels(boolean) -> a
    boolean getDrawLabels() -> d
    void drawNames(boolean) -> b
    boolean getDrawNames() -> e
    void drawBackgrounds(boolean) -> c
    boolean getDrawBackgrounds() -> f
    void setLabelColor(java.awt.Color) -> a
    java.awt.Color getLabelColor() -> g
    void setLabelFont(java.awt.Font) -> a
    java.awt.Font getLabelFont() -> h
ij.gui.Plot -> ij.a.u:
    java.awt.Color gridColor -> g
    int frameWidth -> h
    int frameHeight -> i
    java.awt.Rectangle frame -> a
    float[] xValues -> b
    float[] yValues -> c
    float[] errorBars -> d
    int nPoints -> e
    double xMin -> j
    double xMax -> k
    double yMin -> l
    double yMax -> m
    double xScale -> n
    double yScale -> o
    java.lang.String xLabel -> p
    java.lang.String yLabel -> q
    int flags -> r
    java.awt.Font font -> s
    boolean fixedYScale -> t
    int lineWidth -> u
    int markSize -> v
    ij.process.ImageProcessor ip -> w
    java.lang.String title -> x
    boolean initialized -> y
    boolean plotDrawn -> z
    int plotWidth -> A
    int plotHeight -> B
    boolean multiplePlots -> C
    boolean drawPending -> D
    java.util.ArrayList storedData -> f
    void setLimits(double,double,double,double) -> a
    void setFrameSize(int,int) -> a
    void addPoints(double[],double[],int) -> a
    void addErrorBars(double[]) -> a
    void addLabel(double,double,java.lang.String) -> a
    void setJustification(int) -> a
    void setColor(java.awt.Color) -> a
    void setLineWidth(int) -> b
    void drawLine(double,double,double,double) -> b
    void setup() -> f
    void setScaleAndDrawAxisLabels() -> g
    double niceNumber(double) -> a
    void createImage() -> h
    int getDigits(double,double) -> a
    void draw() -> a
    void drawFloatPolyline(ij.process.ImageProcessor,float[],float[],int) -> a
    void drawYLabel(java.lang.String,int,int,int,java.awt.FontMetrics) -> a
    java.lang.String getCoordinates(int,int) -> b
    ij.process.ImageProcessor getProcessor() -> b
    ij.ImagePlus getImagePlus() -> c
    ij.gui.PlotWindow show() -> d
    void storeData(float[],float[]) -> a
    int getSourceImageID() -> e
ij.gui.PlotWindow -> ij.a.v:
    java.awt.Button list -> k
    java.awt.Button save -> l
    java.awt.Button copy -> m
    java.awt.Button live -> n
    java.awt.Label coordinates -> o
    int options -> p
    ij.gui.Plot plot -> q
    java.lang.String blankLabel -> r
    ij.ImagePlus srcImp -> s
    java.lang.Thread bgThread -> t
    boolean doUpdate -> u
    boolean saveXValues -> v
    boolean autoClose -> w
    int plotWidth -> g
    int plotHeight -> h
    boolean listValues -> x
    boolean interpolate -> i
    boolean noGridLines -> j
    void mouseMoved(int,int) -> a
    void showList() -> k
    java.lang.String createData() -> l
    void copyToClipboard() -> m
    int getPrecision(float[]) -> a
    void lostOwnership(java.awt.datatransfer.Clipboard,java.awt.datatransfer.Transferable) -> lostOwnership
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    float[] getXValues() -> b
    float[] getYValues() -> c
    void drawPlot(ij.gui.Plot) -> a
    void savePreferences(java.util.Properties) -> a
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseDragged(java.awt.event.MouseEvent) -> mouseDragged
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseMoved(java.awt.event.MouseEvent) -> mouseMoved
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
    void imageOpened$3225e243() -> a
    void imageUpdated(ij.ImagePlus) -> b
    void imageClosed(ij.ImagePlus) -> a
    void run() -> run
    void removeListeners() -> n
    boolean isSelection() -> o
ij.gui.PointRoi -> ij.a.w:
    java.awt.Font font -> h
    int fontSize -> i
    double saveMag -> j
    boolean hideLabels -> k
    float[] itof(int[]) -> b
    float[] makeXArray(double,ij.ImagePlus) -> a
    float[] makeYArray(double,ij.ImagePlus) -> b
    void handleMouseMove(int,int) -> h
    void handleMouseUp(int,int) -> d
    void draw(java.awt.Graphics) -> a
    void drawPixels(ij.process.ImageProcessor) -> a
    ij.gui.PointRoi addPoint(double,double) -> a
    ij.gui.PointRoi subtractPoints(ij.gui.Roi) -> a
    ij.process.ImageProcessor getMask() -> a
    boolean contains(int,int) -> a
    boolean subPixelResolution() -> c_
    java.lang.String toString() -> toString
ij.gui.PolygonRoi -> ij.a.x:
    int maxPoints -> h
    int[] xp -> a
    int[] yp -> b
    float[] xpf -> c
    float[] ypf -> d
    int[] xp2 -> e
    int[] yp2 -> f
    int nPoints -> g
    float[] xSpline -> i
    float[] ySpline -> j
    int splinePoints -> k
    double angle1 -> l
    double degrees -> m
    int xClipMin -> n
    int yClipMin -> aj
    int xClipMax -> ak
    int yClipMax -> al
    boolean userCreated -> am
    boolean subPixel -> an
    double startXD -> ao
    double startYD -> ap
    boolean drawOffset -> aq
    long mouseUpTime -> ar
    void init1(int,int) -> j
    void init2(int) -> a
    void draw(java.awt.Graphics) -> a
    void drawSpline(java.awt.Graphics,float[],float[],int,boolean,boolean,boolean) -> a
    void drawPixels(ij.process.ImageProcessor) -> a
    void grow(int,int) -> c
    void updatePolygon() -> i
    void handleMouseMove(int,int) -> h
    void finishPolygon() -> l
    void exitConstructingMode() -> n
    void moveHandle(int,int) -> e
    java.lang.String getAngleAsString() -> f
    void mouseDownInHandle(int,int,int) -> a
    void deleteHandle(double,double) -> b
    int getClosestPoint(double,double,ij.process.FloatPolygon) -> a
    void fitSpline(int) -> b
    void fitSpline() -> o
    void removeSplineFit() -> p
    boolean isSplineFit() -> q
    void fitSplineForStraightening() -> r
    double getUncalibratedLength() -> ai
    void handleMouseUp(int,int) -> d
    void addOffset() -> s
    boolean contains(int,int) -> a
    int isHandle(int,int) -> f
    ij.process.ImageProcessor getMask() -> a
    double getSmoothedLineLength() -> aj
    double getLength() -> e
    double getAngle() -> t
    int getNCoordinates() -> u
    int[] getXCoordinates() -> v
    int[] getYCoordinates() -> w
    java.awt.Polygon getNonSplineCoordinates() -> x
    ij.process.FloatPolygon getNonSplineFloatCoordinates() -> y
    java.awt.Polygon getPolygon() -> j
    ij.process.FloatPolygon getFloatPolygon() -> k
    boolean subPixelResolution() -> c_
    java.awt.Polygon getConvexHull() -> z
    int clipRectMargin() -> c
    java.lang.Object clone() -> clone
    void enlargeArrays() -> A
    double getOffset(double) -> a
    boolean getDrawOffset() -> m
    void setDrawOffset(boolean) -> c
ij.gui.ProfilePlot -> ij.a.y:
    double fixedMin -> a
    double fixedMax -> b
    ij.ImagePlus imp -> c
    double[] profile -> d
    double magnification -> e
    double xInc -> f
    java.lang.String units -> g
    java.lang.String yLabel -> h
    float[] xValues -> i
    ij.gui.Plot getPlot() -> a
    double[] getProfile() -> b
    double getFixedMin() -> c
    double getFixedMax() -> d
    double[] getRowAverageProfile(java.awt.Rectangle,ij.measure.Calibration,ij.process.ImageProcessor) -> a
    double[] getColumnAverageProfile(java.awt.Rectangle,ij.process.ImageProcessor) -> a
    double[] getIrregularProfile(ij.gui.Roi,ij.process.ImageProcessor,ij.measure.Calibration) -> a
    double[] getWideLineProfile(ij.ImagePlus,int) -> a
ij.gui.ProgressBar -> ij.a.z:
    int canvasWidth -> a
    int canvasHeight -> b
    int x -> c
    int y -> d
    int width -> e
    int height -> f
    double percent -> g
    long lastTime -> h
    boolean showBar -> i
    boolean batchMode -> j
    java.awt.Color barColor -> k
    java.awt.Color fillColor -> l
    java.awt.Color backgroundColor -> m
    java.awt.Color frameBrighter -> n
    java.awt.Color frameDarker -> o
    void show(double) -> a
    void show(double,boolean) -> a
    void show(int,int) -> a
    void update(java.awt.Graphics) -> update
    void paint(java.awt.Graphics) -> paint
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    void setBatchMode(boolean) -> a
ij.gui.Roi -> ij.a.A:
    int startX -> o
    int startY -> p
    int x -> q
    int y -> r
    int width -> s
    int height -> t
    java.awt.geom.Rectangle2D$Double bounds -> u
    double xd -> v
    double yd -> w
    double widthd -> x
    double heightd -> y
    int activeHandle -> z
    int state -> A
    int modState -> B
    int cornerDiameter -> C
    ij.gui.Roi previousRoi -> D
    java.awt.BasicStroke onePixelWide -> E
    java.awt.Color ROIColor -> F
    int pasteMode -> a
    int lineWidth -> G
    int type -> H
    int xMax -> I
    int yMax -> J
    ij.ImagePlus imp -> K
    int imageID -> b
    ij.gui.ImageCanvas ic -> L
    int oldX -> M
    int oldY -> N
    int oldWidth -> O
    int oldHeight -> P
    int clipX -> Q
    int clipY -> R
    int clipWidth -> S
    int clipHeight -> T
    ij.ImagePlus clipboard -> U
    boolean constrain -> V
    boolean center -> W
    boolean aspect -> X
    boolean updateFullWindow -> Y
    double mag -> Z
    double asp_bk -> aa
    ij.process.ImageProcessor cachedMask -> ab
    java.awt.Color handleColor -> ac
    java.awt.Color strokeColor -> ad
    java.awt.Color fillColor -> ae
    java.awt.BasicStroke stroke -> af
    boolean overlay -> ag
    boolean wideLine -> ah
    boolean ignoreClipRect -> ai
    java.lang.String name -> c
    int position -> d
    int channel -> e
    int slice -> f
    int frame -> g
    ij.gui.Overlay prototypeOverlay -> h
    boolean subPixel -> i
    void setLocation(int,int) -> i
    void setImage(ij.ImagePlus) -> a
    ij.ImagePlus getImage() -> B
    int getImageID() -> C
    int getType() -> D
    int getState() -> E
    double getLength() -> e
    double[] getFeretValues() -> b_
    java.awt.Polygon getConvexHull() -> z
    java.awt.Rectangle getBounds() -> b
    java.awt.geom.Rectangle2D$Double getFloatBounds() -> F
    java.awt.Rectangle getBoundingRect() -> G
    java.awt.Polygon getPolygon() -> j
    ij.process.FloatPolygon getFloatPolygon() -> k
    java.lang.Object clone() -> clone
    void grow(int,int) -> c
    void moveHandle(int,int) -> e
    void move(int,int) -> g
    void nudge(int) -> d
    void nudgeCorner(int) -> c
    void updateClipRect() -> H
    int clipRectMargin() -> c
    void handleMouseDrag(int,int,int) -> b
    void draw(java.awt.Graphics) -> a
    void drawOverlay(java.awt.Graphics) -> b
    void drawPreviousRoi(java.awt.Graphics) -> c
    void drawHandle(java.awt.Graphics,int,int) -> a
    void drawPixels() -> I
    void drawPixels(ij.process.ImageProcessor) -> a
    boolean contains(int,int) -> a
    int isHandle(int,int) -> f
    void mouseDownInHandle(int,int,int) -> a
    void handleMouseDown(int,int) -> b
    void handleMouseUp(int,int) -> d
    void modifyRoi() -> J
    void update(boolean,boolean) -> a
    void showStatus() -> K
    ij.process.ImageProcessor getMask() -> a
    void updatePaste() -> L
    void endPaste() -> M
    double getAngle(int,int,int,int) -> a
    double getFloatAngle(double,double,double,double) -> a
    void setColor(java.awt.Color) -> a
    java.awt.Color getColor() -> N
    void setStrokeColor(java.awt.Color) -> b
    java.awt.Color getStrokeColor() -> O
    void setFillColor(java.awt.Color) -> c
    java.awt.Color getFillColor() -> P
    void copyAttributes(ij.gui.Roi) -> b
    void setLineWidth(int) -> e
    void updateWideLine(float) -> b
    void setStrokeWidth(float) -> a
    void setStrokeWidth(double) -> b
    float getStrokeWidth() -> Q
    void setStroke(java.awt.BasicStroke) -> a
    java.awt.BasicStroke getStroke() -> R
    java.awt.BasicStroke getScaledStroke() -> S
    java.lang.String getName() -> T
    void setName(java.lang.String) -> a
    void setPasteMode(int) -> f
    void setCornerDiameter(int) -> g
    int getCornerDiameter() -> U
    void setPosition(int) -> h
    int getPosition() -> V
    void setPosition(int,int,int) -> c
    int getCPosition() -> W
    int getZPosition() -> X
    int getTPosition() -> Y
    void setPrototypeOverlay(ij.gui.Overlay) -> a
    ij.gui.Overlay getPrototypeOverlay() -> Z
    int getPasteMode() -> aa
    int getCurrentPasteMode() -> ab
    boolean isArea() -> ac
    boolean isLine() -> ad
    boolean isDrawingTool() -> d
    double getMagnification() -> ae
    java.lang.String getTypeAsString() -> af
    boolean isVisible() -> ag
    boolean subPixelResolution() -> c_
    boolean getDrawOffset() -> m
    void setDrawOffset(boolean) -> c
    void setIgnoreClipRect(boolean) -> d
    boolean isActiveOverlayRoi() -> ah
    boolean equals(java.lang.Object) -> equals
    int screenX(int) -> i
    int screenY(int) -> j
    int screenXD(double) -> c
    int screenYD(double) -> d
    int[] toInt(float[]) -> a
    int[] toInt(float[],int[],int) -> a
    int[] toIntR(float[]) -> b
    float[] toFloat(int[]) -> a
    java.lang.String toString() -> toString
    void mouseDragged(java.awt.event.MouseEvent) -> a
    void mouseReleased(java.awt.event.MouseEvent) -> b
ij.gui.RoiBrush -> ij.a.B:
    int ADD -> a
    int SUBTRACT -> b
    int leftClick -> c
    int alt -> d
    int shift -> e
    java.awt.Polygon poly -> f
    java.awt.Point previousP -> g
    int mode -> h
    void run() -> run
    ij.gui.ShapeRoi getCircularRoi(int,int,int) -> a
ij.gui.RoiProperties -> ij.a.C:
    ij.gui.Roi roi -> a
    java.lang.String title -> b
    boolean showName -> c
    boolean showListCoordinates -> d
    boolean addToOverlay -> e
    boolean overlayOptions -> f
    boolean existingOverlay -> g
    boolean setPositions -> h
    boolean listCoordinates -> i
    java.lang.String[] justNames -> j
    boolean showDialog() -> a
    void listCoordinates(ij.gui.Roi) -> a
ij.gui.ScrollbarWithLabel -> ij.a.D:
    java.awt.Scrollbar bar -> a
    ij.gui.ScrollbarWithLabel$Icon icon -> b
    ij.gui.StackWindow stackWindow -> c
    java.awt.event.AdjustmentListener adjustmentListener -> d
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    java.awt.Dimension getMinimumSize() -> getMinimumSize
    void addKeyListener(java.awt.event.KeyListener) -> addKeyListener
    void removeKeyListener(java.awt.event.KeyListener) -> removeKeyListener
    void addAdjustmentListener(java.awt.event.AdjustmentListener) -> addAdjustmentListener
    int getBlockIncrement() -> getBlockIncrement
    int getMaximum() -> getMaximum
    int getMinimum() -> getMinimum
    int getOrientation() -> getOrientation
    int getUnitIncrement() -> getUnitIncrement
    int getValue() -> getValue
    int getVisibleAmount() -> getVisibleAmount
    void removeAdjustmentListener(java.awt.event.AdjustmentListener) -> removeAdjustmentListener
    void setBlockIncrement(int) -> setBlockIncrement
    void setMaximum(int) -> setMaximum
    void setMinimum(int) -> setMinimum
    void setUnitIncrement(int) -> setUnitIncrement
    void setValue(int) -> setValue
    void setVisibleAmount(int) -> setVisibleAmount
    void setFocusable(boolean) -> setFocusable
    void adjustmentValueChanged(java.awt.event.AdjustmentEvent) -> adjustmentValueChanged
    void updatePlayPauseIcon() -> a
    ij.gui.StackWindow access$000(ij.gui.ScrollbarWithLabel) -> a
ij.gui.ScrollbarWithLabel$Icon -> ij.a.E:
    java.awt.BasicStroke stroke -> a
    char type -> b
    ij.gui.ScrollbarWithLabel this$0 -> c
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    void update(java.awt.Graphics) -> update
    void paint(java.awt.Graphics) -> paint
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
ij.gui.ShapeRoi -> ij.a.F:
    java.awt.Shape shape -> a
    double maxerror -> b
    double flatness -> c
    boolean flatten -> d
    boolean forceTrace -> e
    boolean forceAngle -> f
    java.awt.Stroke defaultStroke -> g
    java.lang.Object clone() -> clone
    java.awt.Shape cloneShape(java.awt.Shape) -> a
    ij.gui.ShapeRoi or(ij.gui.ShapeRoi) -> a
    ij.gui.ShapeRoi and(ij.gui.ShapeRoi) -> b
    ij.gui.ShapeRoi xor(ij.gui.ShapeRoi) -> c
    ij.gui.ShapeRoi not(ij.gui.ShapeRoi) -> d
    ij.gui.ShapeRoi unaryOp(ij.gui.ShapeRoi,int) -> a
    ij.gui.Roi[] getRois() -> f
    ij.gui.Roi shapeToRoi() -> i
    int guessType$3a5674a7(int,boolean) -> a
    ij.gui.Roi createRoi(java.util.Vector,java.util.Vector,int) -> a
    boolean contains(int,int) -> a
    double[] getFeretValues() -> b_
    double getLength() -> e
    double cBezLength(java.awt.geom.CubicCurve2D$Double) -> a
    double qBezLength(java.awt.geom.QuadCurve2D$Double) -> a
    void scaleCoords(double[],double,double) -> a
    float[] getShapeAsArray() -> l
    boolean parsePath(java.awt.geom.PathIterator,double[],java.util.Vector,java.util.Vector,java.util.Vector) -> a
    void draw(java.awt.Graphics) -> a
    void drawPixels(ij.process.ImageProcessor) -> a
    ij.process.ImageProcessor getMask() -> a
    boolean setShape(java.awt.Shape) -> b
    int min(int[]) -> b
    int max(int[]) -> c
    int isHandle(int,int) -> f
    java.awt.Polygon getConvexHull() -> z
ij.gui.StackWindow -> ij.a.G:
    java.awt.Scrollbar sliceSelector -> g
    ij.gui.ScrollbarWithLabel cSelector -> h
    ij.gui.ScrollbarWithLabel zSelector -> i
    ij.gui.ScrollbarWithLabel tSelector -> j
    java.lang.Thread thread -> k
    boolean done -> l
    int slice -> m
    ij.gui.ScrollbarWithLabel animationSelector -> n
    boolean hyperStack -> o
    int nChannels -> p
    int nSlices -> q
    int nFrames -> r
    int c -> s
    int z -> t
    int t -> u
    void addScrollbars(ij.ImagePlus) -> a
    void adjustmentValueChanged(java.awt.event.AdjustmentEvent) -> adjustmentValueChanged
    void updatePosition() -> n
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void mouseWheelMoved(java.awt.event.MouseWheelEvent) -> mouseWheelMoved
    boolean close() -> f
    void showSlice(int) -> a
    void updateSliceSelector() -> a
    void run() -> run
    java.lang.String createSubtitle() -> e
    boolean isHyperStack() -> b
    void setPosition(int,int,int) -> a
    boolean validDimensions() -> c
    void setAnimate(boolean) -> a
    boolean getAnimate() -> k
    int getNScrollbars() -> l
    void removeScrollbars() -> m
ij.gui.TextRoi -> ij.a.H:
    java.lang.String[] theText -> a
    java.lang.String name -> b
    int style -> c
    int size -> d
    java.awt.Font instanceFont -> e
    boolean newFont -> f
    boolean antialiasedText -> g
    int justification -> h
    boolean antialiased -> i
    boolean recordSetFont -> j
    boolean firstChar -> k
    boolean firstMouseUp -> l
    int cline -> m
    void init(java.lang.String,java.awt.Font) -> a
    void addChar(char) -> a
    java.awt.Font getScaledFont() -> s
    void drawPixels(ij.process.ImageProcessor) -> a
    void draw(java.awt.Graphics) -> a
    void drawOverlay(java.awt.Graphics) -> b
    void drawText(java.awt.Graphics) -> d
    java.lang.String getFont() -> f
    int getSize() -> i
    int getStyle() -> l
    void setCurrentFont(java.awt.Font) -> a
    java.awt.Font getCurrentFont() -> n
    boolean isAntialiased() -> o
    void setAntialiased(boolean) -> a
    void setJustification(int) -> a
    int getJustification() -> p
    void handleMouseUp(int,int) -> d
    void updateBounds(java.awt.Graphics) -> e
    void updateText() -> t
    java.lang.String getMacroCode(ij.process.ImageProcessor) -> b
    java.lang.String getText() -> q
    void recordSetFont() -> r
    boolean isDrawingTool() -> d
    void clear(ij.process.ImageProcessor) -> c
    java.lang.Object clone() -> clone
ij.gui.Toolbar -> ij.a.I:
    java.lang.String TOOL_KEY -> a
    java.awt.Dimension ps -> b
    boolean[] down -> c
    int current -> d
    int previous -> e
    int x -> f
    int y -> g
    int xOffset -> h
    int yOffset -> i
    long mouseDownTime -> j
    java.awt.Graphics g -> k
    ij.gui.Toolbar instance -> l
    int mpPrevious -> m
    java.lang.String[] names -> n
    java.lang.String[] icons -> o
    ij.plugin.tool.PlugInTool[] tools -> p
    java.awt.PopupMenu[] menus -> q
    ij.plugin.MacroInstaller macroInstaller -> r
    boolean addingSingleTool -> s
    boolean installingStartupTool -> t
    boolean doNotSavePrefs -> u
    int pc -> v
    java.lang.String icon -> w
    java.awt.PopupMenu rectPopup -> x
    java.awt.PopupMenu ovalPopup -> y
    java.awt.PopupMenu pointPopup -> z
    java.awt.PopupMenu linePopup -> A
    java.awt.PopupMenu switchPopup -> B
    java.awt.CheckboxMenuItem rectItem -> C
    java.awt.CheckboxMenuItem roundRectItem -> D
    java.awt.CheckboxMenuItem ovalItem -> E
    java.awt.CheckboxMenuItem ellipseItem -> F
    java.awt.CheckboxMenuItem brushItem -> G
    java.awt.CheckboxMenuItem pointItem -> H
    java.awt.CheckboxMenuItem multiPointItem -> I
    java.awt.CheckboxMenuItem straightLineItem -> J
    java.awt.CheckboxMenuItem polyLineItem -> K
    java.awt.CheckboxMenuItem freeLineItem -> L
    java.awt.CheckboxMenuItem arrowItem -> M
    java.lang.String currentSet -> N
    java.awt.Color foregroundColor -> O
    java.awt.Color backgroundColor -> P
    int ovalType -> Q
    boolean multiPointMode -> R
    boolean roundRectMode -> S
    boolean arrowMode -> T
    int brushSize -> U
    int arcSize -> V
    int lineType -> W
    java.awt.Color gray -> X
    java.awt.Color brighter -> Y
    java.awt.Color darker -> Z
    java.awt.Color evenDarker -> aa
    java.awt.Color triangleColor -> ab
    java.awt.Color toolColor -> ac
    int getToolId() -> a
    ij.gui.Toolbar getInstance() -> b
    void drawButton(java.awt.Graphics,int) -> a
    void drawTriangle(int,int) -> a
    void drawPoint(int,int) -> b
    int v() -> n
    void showMessage(int) -> d
    void m(int,int) -> c
    void d(int,int) -> d
    void dot(int,int) -> e
    void resetButtons() -> o
    void paint(java.awt.Graphics) -> paint
    boolean setTool(java.lang.String) -> a
    java.lang.String getToolName() -> c
    java.lang.String getName(int) -> e
    void setTool(int) -> a
    void setTool2(int) -> f
    boolean isValidTool(int) -> g
    java.awt.Color getForegroundColor() -> d
    void setForegroundColor(java.awt.Color) -> a
    java.awt.Color getBackgroundColor() -> e
    void setBackgroundColor(java.awt.Color) -> b
    int getBrushSize() -> f
    int getRoundRectArcSize() -> g
    void setRoundRectArcSize(int) -> b
    boolean getMultiPointMode() -> h
    int getOvalToolType() -> i
    void repaintTool(int) -> h
    int toolID(int) -> i
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void addPluginTools() -> p
    void addBuiltInTool(java.lang.String) -> b
    void addItem(java.lang.String) -> c
    void drawTool(int,boolean) -> a
    boolean isLine(int) -> j
    void restorePreviousTool() -> j
    boolean isMacroTool(int) -> k
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseDragged(java.awt.event.MouseEvent) -> mouseDragged
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
    void removeTools() -> q
    void installStartupMacros() -> r
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    java.awt.Dimension getMinimumSize() -> getMinimumSize
    void mouseMoved(java.awt.event.MouseEvent) -> mouseMoved
    int addTool(java.lang.String) -> d
    void addMacroTool(java.lang.String,ij.plugin.MacroInstaller,int) -> a
    void resetTools() -> s
    void addMacroTool(java.lang.String,ij.plugin.MacroInstaller) -> a
    void setPrefs(int) -> l
    void addPlugInTool(ij.plugin.tool.PlugInTool) -> a
    ij.plugin.tool.PlugInTool getPlugInTool() -> k
    void runMacroTool(int) -> c
    void installStartupTools() -> l
    boolean installBuiltinTool(java.lang.String) -> e
    boolean installStartupMacrosTools() -> m
ij.gui.TrimmedButton -> ij.a.J:
    int trim -> a
    java.awt.Dimension getMinimumSize() -> getMinimumSize
    java.awt.Dimension getPreferredSize() -> getPreferredSize
ij.gui.WaitForUserDialog -> ij.a.K:
    java.awt.Button button -> a
    ij.gui.MultiLineLabel label -> b
    int xloc -> c
    int yloc -> d
    boolean escPressed -> e
    void show() -> show
    void close() -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
    boolean escPressed() -> b
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
ij.gui.YesNoCancelDialog -> ij.a.L:
    java.awt.Button yesB -> a
    java.awt.Button noB -> b
    java.awt.Button cancelB -> c
    boolean cancelPressed -> d
    boolean yesPressed -> e
    boolean firstPaint -> f
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    boolean cancelPressed() -> a
    boolean yesPressed() -> b
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
    void paint(java.awt.Graphics) -> paint
    void windowClosing(java.awt.event.WindowEvent) -> windowClosing
    void windowActivated(java.awt.event.WindowEvent) -> windowActivated
    void windowOpened(java.awt.event.WindowEvent) -> windowOpened
    void windowClosed(java.awt.event.WindowEvent) -> windowClosed
    void windowIconified(java.awt.event.WindowEvent) -> windowIconified
    void windowDeiconified(java.awt.event.WindowEvent) -> windowDeiconified
    void windowDeactivated(java.awt.event.WindowEvent) -> windowDeactivated
ij.io.BitBuffer -> ij.b.a:
    int currentByte -> a
    int currentBit -> b
    byte[] byteBuffer -> c
    int eofByte -> d
    int[] backMask -> e
    int[] frontMask -> f
    boolean eofFlag -> g
    int getBits(int) -> a
ij.io.ByteVector -> ij.b.b:
    byte[] data -> a
    int size -> b
    void add(byte) -> a
    int size() -> a
    void add(byte[]) -> a
    void doubleCapacity() -> c
    byte[] toByteArray() -> b
ij.io.DirectoryChooser -> ij.b.c:
    java.lang.String directory -> a
    java.lang.String title -> b
    java.lang.String getDirectory() -> a
    java.lang.String access$002(ij.io.DirectoryChooser,java.lang.String) -> a
    java.lang.String access$000(ij.io.DirectoryChooser) -> a
    java.lang.String access$084(ij.io.DirectoryChooser,java.lang.Object) -> a
ij.io.DirectoryChooser$1 -> ij.b.d:
    java.lang.String val$title -> a
    ij.io.DirectoryChooser this$0 -> b
    void run() -> run
ij.io.FileInfo -> ij.b.e:
    int fileFormat -> a
    int fileType -> b
    java.lang.String fileName -> c
    java.lang.String directory -> d
    java.lang.String url -> e
    int width -> f
    int height -> g
    int offset -> h
    int nImages -> i
    boolean whiteIsZero -> j
    boolean intelByteOrder -> k
    int compression -> l
    int[] stripOffsets -> m
    int[] stripLengths -> n
    int rowsPerStrip -> o
    int lutSize -> p
    byte[] reds -> q
    byte[] greens -> r
    byte[] blues -> s
    java.lang.Object pixels -> t
    java.lang.String debugInfo -> u
    java.lang.String[] sliceLabels -> v
    java.lang.String info -> w
    java.io.InputStream inputStream -> x
    ij.VirtualStack virtualStack -> y
    double pixelWidth -> z
    double pixelHeight -> A
    double pixelDepth -> B
    java.lang.String unit -> C
    int calibrationFunction -> D
    double[] coefficients -> E
    java.lang.String valueUnit -> F
    double frameInterval -> G
    java.lang.String description -> H
    long longOffset -> I
    int[] metaDataTypes -> J
    byte[][] metaData -> K
    double[] displayRanges -> L
    byte[][] channelLuts -> M
    byte[] roi -> N
    byte[][] overlay -> O
    int samplesPerPixel -> P
    java.lang.String openNextDir -> Q
    java.lang.String openNextName -> R
    long getOffset() -> a
    int getBytesPerPixel() -> b
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
ij.io.FileOpener -> ij.b.f:
    ij.io.FileInfo fi -> a
    int width -> b
    int height -> c
    boolean showConflictMessage -> d
    double minValue -> e
    double maxValue -> f
    boolean silentMode -> g
    ij.ImagePlus open(boolean) -> a
    void setOverlay(ij.ImagePlus,byte[][]) -> a
    ij.ImagePlus openStack(java.awt.image.ColorModel,boolean) -> a
    void setStackDisplayRange(ij.ImagePlus) -> b
    void setCalibration(ij.ImagePlus) -> a
    java.io.InputStream createInputStream(ij.io.FileInfo) -> a
    void error(java.lang.String,ij.io.FileInfo,long,long) -> a
    java.lang.Object readPixels(ij.io.FileInfo) -> b
    java.util.Properties decodeDescriptionString(ij.io.FileInfo) -> c
    java.lang.Double getNumber(java.util.Properties,java.lang.String) -> a
    double getDouble(java.util.Properties,java.lang.String) -> b
    boolean getBoolean(java.util.Properties,java.lang.String) -> c
    void setSilentMode(boolean) -> b
ij.io.FileSaver -> ij.b.g:
    int jpegQuality -> a
    ij.ImagePlus imp -> b
    ij.io.FileInfo fi -> c
    java.lang.String name -> d
    java.lang.String directory -> e
    boolean saveName -> f
    boolean save() -> a
    boolean saveAsTiff() -> d
    boolean saveAsTiff(java.lang.String) -> a
    byte[][] getOverlay(ij.ImagePlus) -> a
    boolean saveAsTiffStack(java.lang.String) -> b
    byte[] serialize() -> b
    void saveDisplayRangesAndLuts(ij.ImagePlus,ij.io.FileInfo) -> a
    void updateImp(ij.io.FileInfo,int) -> a
    void showErrorMessage(java.io.IOException) -> a
    java.lang.String getDescriptionString() -> e
    void setJpegQuality(int) -> a
    int getJpegQuality() -> c
ij.io.ImageReader -> ij.b.h:
    ij.io.FileInfo fi -> c
    int width -> d
    int height -> e
    long skipCount -> f
    int bytesPerPixel -> g
    int bufferSize -> h
    int nPixels -> i
    long byteCount -> j
    boolean showProgressBar -> k
    int eofErrorCount -> l
    long startTime -> m
    double min -> a
    double max -> b
    void eofError() -> a
    byte[] readCompressed8bitImage(java.io.InputStream) -> b
    short[] read16bitImage(java.io.InputStream) -> c
    void showProgress(int,int) -> a
    void showProgress(long,long) -> a
    java.lang.Object readRGB48(java.io.InputStream) -> d
    java.lang.Object readRGB48Planar(java.io.InputStream) -> e
    short[] read12bitImage(java.io.InputStream) -> f
    float[] read24bitImage(java.io.InputStream) -> g
    byte[] read1bitImage(java.io.InputStream) -> h
    void skip(java.io.InputStream) -> i
    java.lang.Object readPixels(java.io.InputStream) -> a
    java.lang.Object readPixels(java.io.InputStream,long) -> a
    byte[] uncompress(byte[]) -> a
    byte[] zipUncompress(byte[]) -> b
ij.io.ImageWriter -> ij.b.i:
    ij.io.FileInfo fi -> a
    boolean showProgressBar -> b
    void showProgress(double) -> a
    void write8BitImage(java.io.OutputStream,byte[]) -> a
    void write8BitStack(java.io.OutputStream,java.lang.Object[]) -> a
    void write8BitVirtualStack(java.io.OutputStream,ij.VirtualStack) -> a
    void write16BitImage(java.io.OutputStream,short[]) -> a
    void write16BitStack(java.io.OutputStream,java.lang.Object[]) -> b
    void write16BitVirtualStack(java.io.OutputStream,ij.VirtualStack) -> b
    void writeRGB48Image(java.io.OutputStream,java.lang.Object[]) -> c
    void writeFloatImage(java.io.OutputStream,float[]) -> a
    void writeFloatStack(java.io.OutputStream,java.lang.Object[]) -> d
    void writeFloatVirtualStack(java.io.OutputStream,ij.VirtualStack) -> c
    void writeRGBImage(java.io.OutputStream,int[]) -> a
    void writeRGBStack(java.io.OutputStream,java.lang.Object[]) -> e
    void writeRGBVirtualStack(java.io.OutputStream,ij.VirtualStack) -> d
    void write(java.io.OutputStream) -> a
ij.io.ImportDialog -> ij.b.j:
    int choiceSelection -> a
    int width -> b
    int height -> c
    long offset -> d
    int nImages -> e
    int gapBetweenImages -> f
    int options -> g
    boolean whiteIsZero -> h
    boolean intelByteOrder -> i
    void savePreferences(java.util.Properties) -> a
ij.io.OpenDialog -> ij.b.k:
    java.lang.String dir -> a
    java.lang.String name -> b
    boolean recordPath -> c
    java.lang.String defaultDirectory -> d
    java.awt.Frame sharedFrame -> e
    java.lang.String title -> f
    java.lang.String lastDir -> g
    java.lang.String lastName -> h
    void jOpen(java.lang.String,java.lang.String,java.lang.String) -> a
    void open(java.lang.String,java.lang.String,java.lang.String) -> b
    void decodePath(java.lang.String) -> d
    java.lang.String getDirectory() -> a
    java.lang.String getFileName() -> b
    java.lang.String getDefaultDirectory() -> c
    void setDefaultDirectory(java.lang.String) -> a
    java.lang.String getLastDirectory() -> d
    void setLastDirectory(java.lang.String) -> b
    java.lang.String getLastName() -> e
    void setLastName(java.lang.String) -> c
    java.lang.String access$002(ij.io.OpenDialog,java.lang.String) -> a
    java.lang.String access$102(ij.io.OpenDialog,java.lang.String) -> b
ij.io.OpenDialog$1 -> ij.b.l:
    java.lang.String val$title -> a
    java.lang.String val$path -> b
    java.lang.String val$fileName -> c
    ij.io.OpenDialog this$0 -> d
    void run() -> run
ij.io.Opener -> ij.b.m:
    java.lang.String[] types -> a
    int fileType -> b
    boolean error -> c
    boolean isRGB48 -> d
    boolean silentMode -> e
    boolean openUsingPlugins -> f
    boolean bioformats -> g
    java.lang.String url -> h
    void open() -> a
    void open(java.lang.String) -> a
    boolean openAndAddToRecent(java.lang.String) -> b
    ij.ImagePlus openImage(java.lang.String,java.lang.String) -> a
    ij.ImagePlus openImage(java.lang.String,int) -> a
    java.lang.String getPath() -> b
    ij.ImagePlus openURL(java.lang.String) -> f
    ij.ImagePlus openWithHandleExtraFileTypes(java.lang.String,int[]) -> a
    ij.ImagePlus openDicomStack(java.util.zip.ZipInputStream,java.util.zip.ZipEntry) -> a
    ij.ImagePlus openJpegOrGifUsingURL(java.lang.String,java.net.URL) -> a
    ij.ImagePlus openPngUsingURL(java.lang.String,java.net.URL) -> b
    ij.ImagePlus openJpegOrGif(java.lang.String,java.lang.String) -> b
    ij.ImagePlus openUsingImageIO(java.lang.String) -> g
    ij.ImagePlus openTiffStack(ij.io.FileInfo[]) -> a
    ij.ImagePlus openTiff(java.lang.String,java.lang.String) -> c
    ij.ImagePlus openTiff(java.lang.String,int) -> b
    ij.ImagePlus openTiff(java.io.InputStream,java.lang.String) -> a
    ij.ImagePlus openZip(java.lang.String) -> h
    ij.ImagePlus deserialize(byte[]) -> a
    ij.ImagePlus makeComposite(ij.ImagePlus,ij.io.FileInfo) -> a
    java.lang.String getName(java.lang.String) -> c
    java.lang.String getDir(java.lang.String) -> d
    ij.ImagePlus openTiff2(ij.io.FileInfo[]) -> b
    ij.gui.Roi openRoi(java.lang.String) -> e
    int getFileType(java.lang.String) -> i
    void setSilentMode(boolean) -> a
    void setOpenUsingPlugins(boolean) -> b
ij.io.PluginClassLoader -> ij.b.n:
    void init(java.lang.String) -> a
    void addJAR(java.io.File) -> a
ij.io.PluginInstaller -> ij.b.o:
    boolean install(java.lang.String) -> a
    boolean savePlugin(java.io.File,byte[]) -> a
    byte[] download(java.net.URL) -> a
    byte[] download(java.io.File) -> a
ij.io.RandomAccessStream -> ij.b.p:
    java.io.InputStream src -> a
    java.io.RandomAccessFile ras -> b
    long pointer -> c
    java.util.Vector data -> d
    long length -> e
    boolean foundEOS -> f
    long getLongFilePointer() -> a
    int read() -> read
    int read(byte[],int,int) -> read
    void readFully(byte[]) -> a
    void readFully(byte[],int) -> a
    long readUntil(long) -> b
    void seek(long) -> a
    void seek(int) -> a
    int readInt() -> e
    double readDouble() -> b
    short readShort() -> c
    float readFloat() -> d
    void close() -> close
ij.io.RoiDecoder -> ij.b.q:
    byte[] data -> a
    java.lang.String path -> b
    java.io.InputStream is -> c
    java.lang.String name -> d
    int size -> e
    ij.gui.Roi getRoi() -> a
    void decodeOverlayOptions(ij.gui.Roi,int,int,int,int) -> a
    void getStrokeWidthAndColor(ij.gui.Roi,int) -> a
    ij.gui.Roi getShapeRoi() -> b
    ij.gui.Roi getTextRoi(ij.gui.Roi) -> a
    ij.gui.Roi getImageRoi(ij.gui.Roi,int,int) -> a
    java.lang.String getRoiName() -> c
    int getByte(int) -> a
    int getShort(int) -> b
    int getInt(int) -> c
    float getFloat(int) -> d
    ij.gui.Roi openFromByteArray(byte[]) -> a
ij.io.RoiEncoder -> ij.b.r:
    java.lang.String path -> a
    java.io.OutputStream f -> b
    byte[] data -> c
    java.lang.String roiName -> d
    int roiNameSize -> e
    void write(ij.gui.Roi) -> a
    byte[] saveAsByteArray(ij.gui.Roi) -> b
    void write(ij.gui.Roi,java.io.OutputStream) -> a
    void saveStrokeWidthAndColor(ij.gui.Roi) -> c
    void saveOverlayOptions(ij.gui.Roi,int) -> a
    void saveTextRoi(ij.gui.TextRoi) -> a
    void saveImageRoi(ij.gui.ImageRoi) -> a
    void putHeader2(ij.gui.Roi,int) -> b
    void putByte(int,int) -> a
    void putShort(int,int) -> b
    void putFloat(int,float) -> a
    void putInt(int,int) -> c
ij.io.SaveDialog -> ij.b.s:
    java.lang.String dir -> a
    java.lang.String name -> b
    java.lang.String title -> c
    java.lang.String ext -> d
    boolean isMacro() -> c
    java.lang.String setExtension(java.lang.String,java.lang.String) -> a
    void jSave(java.lang.String,java.lang.String,java.lang.String) -> a
    void save(java.lang.String,java.lang.String,java.lang.String) -> b
    boolean noExtension(java.lang.String) -> a
    java.lang.String getDirectory() -> a
    java.lang.String getFileName() -> b
    java.lang.String access$002(ij.io.SaveDialog,java.lang.String) -> a
    java.lang.String access$102(ij.io.SaveDialog,java.lang.String) -> b
    java.lang.String access$100(ij.io.SaveDialog) -> a
    boolean access$200(ij.io.SaveDialog,java.lang.String) -> c
    java.lang.String access$300(ij.io.SaveDialog) -> b
    java.lang.String access$302(ij.io.SaveDialog,java.lang.String) -> d
ij.io.SaveDialog$1 -> ij.b.t:
    java.lang.String val$title -> a
    java.lang.String val$defaultDir -> b
    java.lang.String val$defaultName -> c
    ij.io.SaveDialog this$0 -> d
    void run() -> run
ij.io.TiffDecoder -> ij.b.u:
    java.lang.String directory -> a
    java.lang.String name -> b
    java.lang.String url -> c
    ij.io.RandomAccessStream in -> d
    boolean debugMode -> e
    boolean littleEndian -> f
    java.lang.String dInfo -> g
    int ifdCount -> h
    int[] metaDataCounts -> i
    java.lang.String tiffMetadata -> j
    int photoInterp -> k
    int getInt() -> c
    int getShort() -> d
    void getColorMap(long,ij.io.FileInfo) -> a
    byte[] getString(int,long) -> a
    void saveMetadata(java.lang.String,java.lang.String) -> a
    void decodeNIHImageHeader(int,ij.io.FileInfo) -> a
    java.lang.String getName(int) -> a
    double getRational(long) -> a
    ij.io.FileInfo OpenIFD() -> e
    void getMetaData(int,ij.io.FileInfo) -> b
    void getInfoProperty(int,ij.io.FileInfo) -> c
    void getSliceLabels(int,int,ij.io.FileInfo) -> a
    void getDisplayRanges(int,ij.io.FileInfo) -> d
    void getLuts(int,int,ij.io.FileInfo) -> b
    void getOverlay(int,int,ij.io.FileInfo) -> c
    void error(java.lang.String) -> a
    void skipUnknownType(int,int) -> a
    void enableDebugging() -> a
    ij.io.FileInfo[] getTiffInfo() -> b
    java.lang.String getGapInfo(ij.io.FileInfo[]) -> a
ij.io.TiffEncoder -> ij.b.v:
    ij.io.FileInfo fi -> a
    int bitsPerSample -> b
    int photoInterp -> c
    int samplesPerPixel -> d
    int nEntries -> e
    int ifdSize -> f
    long imageOffset -> g
    int imageSize -> h
    long stackSize -> i
    byte[] description -> j
    int metaDataSize -> k
    int nMetaDataTypes -> l
    int nMetaDataEntries -> m
    int nSliceLabels -> n
    int extraMetaDataEntries -> o
    int scaleSize -> p
    boolean littleEndian -> q
    byte[] buffer -> r
    void write(java.io.OutputStream) -> a
    void write(java.io.DataOutputStream) -> a
    int getMetaDataSize() -> a
    void writeEntry(java.io.OutputStream,int,int,int,int) -> a
    void writeIFD(java.io.OutputStream,int,int) -> a
    void writeShort(java.io.OutputStream,int) -> a
    void writeInt(java.io.OutputStream,int) -> b
    void writeChars(java.io.OutputStream,java.lang.String) -> a
ij.macro.FunctionFinder -> ij.c.a:
    java.awt.Dialog d -> a
    java.awt.TextField prompt -> b
    java.awt.List completions -> c
    java.lang.String[] commands -> d
    void populateList(java.lang.String) -> a
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
    void runFromLabel(java.lang.String) -> b
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
    void textValueChanged(java.awt.event.TextEvent) -> textValueChanged
    void windowClosing(java.awt.event.WindowEvent) -> windowClosing
    void windowActivated(java.awt.event.WindowEvent) -> windowActivated
    void windowDeactivated(java.awt.event.WindowEvent) -> windowDeactivated
    void windowClosed(java.awt.event.WindowEvent) -> windowClosed
    void windowOpened(java.awt.event.WindowEvent) -> windowOpened
    void windowIconified(java.awt.event.WindowEvent) -> windowIconified
    void windowDeiconified(java.awt.event.WindowEvent) -> windowDeiconified
ij.macro.Functions -> ij.c.b:
    ij.macro.Interpreter interp -> a
    ij.macro.Program pgm -> h
    boolean updateNeeded -> i
    boolean autoUpdate -> j
    ij.process.ImageProcessor defaultIP -> k
    int imageType -> l
    boolean colorSet -> m
    boolean fontSet -> n
    java.awt.Color defaultColor -> o
    double defaultValue -> p
    ij.gui.Plot plot -> b
    int plotID -> q
    int justification -> r
    java.awt.Font font -> s
    ij.gui.GenericDialog gd -> D
    java.io.PrintWriter writer -> c
    boolean altKeyDown -> E
    boolean shiftKeyDown -> F
    boolean antialiasedText -> G
    java.lang.StringBuffer buffer -> H
    ij.plugin.frame.RoiManager roiManager -> d
    java.util.Properties props -> I
    ij.measure.CurveFitter fitter -> J
    boolean showFitDialog -> K
    boolean logFitResults -> L
    boolean resultsPending -> e
    ij.gui.Overlay offscreenOverlay -> M
    ij.gui.Overlay overlayClipboard -> N
    java.awt.geom.GeneralPath overlayPath -> O
    boolean saveSettingsCalled -> P
    boolean usePointerCursor -> Q
    boolean hideProcessStackDialog -> R
    float divideByZeroValue -> S
    int jpegQuality -> T
    int saveLineWidth -> U
    boolean doScaling -> V
    boolean weightedColor -> W
    double[] weights -> X
    boolean interpolateScaledImages -> Y
    boolean open100Percent -> Z
    boolean blackCanvas -> aa
    boolean useJFileChooser -> ab
    boolean debugMode -> ac
    java.awt.Color foregroundColor -> ad
    java.awt.Color backgroundColor -> ae
    java.awt.Color roiColor -> af
    boolean useInvertingLut -> ag
    int measurements -> ah
    int decimalPlaces -> ai
    boolean blackBackground -> aj
    ij.gui.WaitForUserDialog waitForUserDialog -> f
    int pasteMode -> ak
    int lineWidth -> al
    boolean expandableArrays -> g
    java.util.Random ran -> am
    void doFunction(int) -> a
    double getFunctionValue(int) -> b
    java.lang.String getStringFunction(int) -> c
    void setLineWidth(int) -> e
    ij.macro.Variable[] getArrayFunction(int) -> d
    java.lang.String getString() -> a
    double getArg() -> e
    double getFirstArg() -> f
    double getNextArg() -> g
    double getLastArg() -> h
    java.lang.String getStringArg() -> i
    java.lang.String getFirstString() -> j
    java.lang.String getNextString() -> k
    java.lang.String getLastString() -> l
    ij.macro.Variable getVariableArg() -> m
    ij.macro.Variable getFirstVariable() -> n
    ij.macro.Variable getNextVariable() -> o
    ij.macro.Variable getLastVariable() -> p
    ij.macro.Variable getVariable() -> b
    ij.macro.Variable getFirstArrayVariable() -> q
    ij.macro.Variable getNextArrayVariable() -> r
    ij.macro.Variable getLastArrayVariable() -> s
    ij.macro.Variable getArrayVariable() -> t
    double[] getNextArray() -> u
    double[] getLastArray() -> v
    double[] getNumericArray() -> w
    java.lang.String[] getStringArray() -> x
    ij.macro.Variable[] getArray() -> c
    java.awt.Color getColor() -> y
    void checkIndex(int,int,int) -> a
    void makeLine() -> z
    ij.ImagePlus getImage() -> A
    void resetImage() -> B
    ij.process.ImageProcessor getProcessor() -> C
    void setForegroundColor(ij.process.ImageProcessor) -> a
    void updateAndDraw() -> D
    void updateDisplay() -> d
    void setFont(ij.process.ImageProcessor) -> b
    void changeValues() -> E
    java.lang.String toString(int) -> f
    void getCoordinates() -> F
    ij.macro.Variable[] split() -> G
    ij.macro.Variable[] getFileList() -> H
    java.lang.String getInfo(java.lang.String) -> a
    java.lang.String getWindowContents() -> I
    java.lang.String getImageInfo() -> J
    void showMessage(boolean) -> a
    void getHistogram() -> K
    void setLut() -> L
    void makeSelection() -> M
    void getPlotValues() -> N
    void newPlot() -> O
    void addToPlot(int) -> g
    boolean isOpen(java.lang.String) -> b
    boolean isStringArg() -> P
    boolean isArrayArg() -> Q
    double setMultipleIndexes(ij.plugin.frame.RoiManager) -> a
    void getMinAndMax() -> R
    void selectImage(java.lang.String) -> c
    void selectWindowManagerImage(java.lang.String) -> d
    void close() -> S
    void setBatchMode() -> T
    void displayBatchModeImage(ij.ImagePlus) -> a
    void setSlice() -> U
    void newImage() -> V
    void saveAs() -> W
    void setAutoThreshold() -> X
    double parseDouble(java.lang.String) -> e
    double parseInt() -> Y
    java.lang.String runMacro(boolean) -> b
    void drawOrFill(int) -> h
    void getStatistics(boolean) -> c
    java.lang.String replace() -> Z
    void floodFill() -> aa
    void setVoxelSize() -> ab
    void getLocationAndSize() -> ac
    java.lang.String doDialog() -> ad
    void getDateAndTime() -> ae
    void setMetadata() -> af
    ij.ImagePlus getImageArg() -> ag
    void imageCalculator() -> ah
    void setRGBWeights() -> ai
    void makePolygon() -> aj
    void updateRoi(ij.gui.Roi) -> a
    boolean checkPath(java.io.File) -> a
    void setSelectionName() -> ak
    java.lang.String openFile() -> al
    java.lang.String openAsString(boolean) -> d
    java.lang.String call() -> am
    ij.macro.Variable[] getFontList() -> an
    void setOption() -> ao
    void showText() -> ap
    ij.macro.Variable[] newMenu() -> aq
    void setSelectionLocation() -> ar
    boolean getCapsLockState() -> as
    ij.macro.Variable[] getList() -> at
    java.lang.String getClipboardContents() -> au
    void getDimensions() -> av
    java.lang.String exec() -> aw
    double getColorValue(java.awt.Color) -> a
    void getStackStatistics$1295b349(ij.ImagePlus) -> b
    void setActiveChannels(ij.ImagePlus,java.lang.String) -> a
    void getActiveChannels(ij.ImagePlus) -> c
    void waitForUser() -> ax
    void setCommands() -> ay
    void setMeasurements() -> az
    void setProperties() -> aA
    java.lang.String getProperties() -> aB
    void makePoint() -> aC
    void makeText() -> aD
    void makeEllipse() -> aE
    double fitCurve() -> aF
    ij.macro.Variable[] printArray() -> aG
    ij.macro.Variable[] concatArray() -> aH
    ij.macro.Variable[] sliceArray() -> aI
    ij.macro.Variable[] duplicate(ij.macro.Variable[]) -> a
    ij.macro.Variable[] trimArray() -> aJ
    ij.macro.Variable[] sortArray() -> aK
    ij.macro.Variable[] getRankPositions() -> aL
    ij.macro.Variable[] getArrayStatistics() -> aM
    ij.macro.Variable[] fillArray() -> aN
    ij.macro.Variable[] reverseArray() -> aO
    double overlayDrawRectOrEllipse(ij.ImagePlus,boolean) -> a
    void addDrawingToOverlay(ij.ImagePlus) -> d
    void addRoi(ij.ImagePlus,ij.gui.Roi) -> a
    void getDisplayedArea() -> aP
    void toScaled() -> aQ
    void toUnscaled() -> aR
ij.macro.Interpreter -> ij.c.c:
    int pc -> a
    int token -> b
    int tokenAddress -> c
    double tokenValue -> D
    java.lang.String tokenString -> d
    boolean looseSyntax -> E
    int lineNumber -> F
    boolean showingProgress -> e
    boolean keysSet -> f
    boolean checkingType -> G
    int prefixValue -> H
    ij.macro.Variable[] stack -> g
    int topOfStack -> h
    int topOfGlobals -> I
    int startOfLocals -> J
    ij.macro.Interpreter instance -> i
    ij.macro.Interpreter previousInstance -> j
    boolean batchMode -> k
    java.util.Vector imageTable -> l
    boolean done -> m
    ij.macro.Program pgm -> K
    ij.macro.Functions func -> L
    boolean inFunction -> M
    java.lang.String macroName -> n
    java.lang.String argument -> o
    java.lang.String returnValue -> N
    boolean calledMacro -> p
    double[] rgbWeights -> q
    java.lang.String additionalFunctions -> O
    ij.plugin.frame.Editor editor -> r
    int debugMode -> s
    boolean showDebugFunctions -> P
    boolean showVariables -> Q
    boolean wasError -> R
    ij.macro.ReturnException returnException -> S
    void run(java.lang.String) -> a
    java.lang.String run(java.lang.String,java.lang.String) -> a
    void run(int) -> a
    void runMacro(ij.macro.Program,int,java.lang.String) -> a
    void saveGlobals(ij.macro.Program) -> a
    void saveGlobals2(ij.macro.Program) -> b
    void getToken() -> a
    int nextToken() -> b
    int nextNextToken() -> c
    void putTokenBack() -> d
    void doStatements() -> E
    void doStatement() -> F
    ij.macro.Variable runUserFunction() -> G
    void doBlock() -> H
    void skipStatement() -> I
    void skipBlock() -> J
    void skipParens() -> K
    void skipFunction() -> L
    void doAssignment() -> M
    int getExpressionType() -> N
    boolean isSimpleFunctionCall(boolean) -> b
    boolean getBoolean() -> O
    double getLogicalExpression() -> P
    double getBooleanExpression() -> e
    double getAssignmentExpression() -> Q
    void checkBoolean(double) -> a
    void doVar() -> R
    void getLeftParen() -> f
    void getRightParen() -> g
    void getParens() -> h
    void getComma() -> i
    void error(java.lang.String) -> b
    ij.text.TextWindow updateDebugWindow(java.lang.String[],ij.text.TextWindow) -> a
    java.lang.String getString() -> j
    java.lang.String getStringTerm() -> k
    java.lang.String toString(double) -> b
    double getExpression() -> l
    double getTerm() -> S
    double getFactor() -> T
    ij.macro.Variable getArrayElement(ij.macro.Variable) -> a
    double getStringExpression() -> U
    ij.macro.Variable lookupLocalVariable(int) -> b
    ij.macro.Variable lookupVariable(int) -> c
    void pushGlobals() -> V
    ij.macro.Variable push(int,double,java.lang.String,ij.macro.Interpreter) -> a
    void trimStack(int,int) -> a
    ij.macro.Variable lookupVariable() -> m
    java.lang.String lookupStringVariable() -> W
    int getIndex() -> n
    void undefined() -> X
    void dump() -> o
    void finishUp() -> p
    void abort() -> q
    void abortMacro() -> r
    ij.macro.Interpreter getInstance() -> s
    void setBatchMode(boolean) -> a
    boolean isBatchMode() -> t
    void addBatchModeImage(ij.ImagePlus) -> a
    void removeBatchModeImage(ij.ImagePlus) -> b
    int[] getBatchModeImageIDs() -> u
    int getBatchModeImageCount() -> v
    ij.ImagePlus getBatchModeImage(int) -> d
    ij.ImagePlus getLastBatchModeImage() -> w
    void setAdditionalFunctions(java.lang.String) -> c
    java.lang.String getAdditionalFunctions() -> x
    ij.plugin.frame.RoiManager getBatchModeRoiManager() -> y
    void setEditor(ij.plugin.frame.Editor) -> a
    void setDebugMode(int) -> e
    int getLineNumber() -> z
    java.lang.String[] getVariables() -> A
    boolean done() -> B
    ij.plugin.frame.Editor getEditor() -> C
    boolean wasError() -> D
    void setVariable(java.lang.String,double) -> a
    double getVariable(java.lang.String) -> d
    double getVariable2(java.lang.String) -> e
    java.lang.String getStringVariable(java.lang.String) -> f
    java.lang.String getVariableAsString(java.lang.String) -> g
ij.macro.MacroConstants -> ij.c.d:
    java.lang.String[] keywords -> t
    int[] keywordIDs -> u
    java.lang.String[] functions -> v
    int[] functionIDs -> w
    java.lang.String[] numericFunctions -> x
    int[] numericFunctionIDs -> y
    java.lang.String[] stringFunctions -> z
    int[] stringFunctionIDs -> A
    java.lang.String[] arrayFunctions -> B
    int[] arrayFunctionIDs -> C
ij.macro.MacroRunner -> ij.c.e:
    java.lang.String macro -> a
    ij.macro.Program pgm -> b
    int address -> c
    java.lang.String name -> d
    java.lang.Thread thread -> e
    java.lang.String argument -> f
    ij.plugin.frame.Editor editor -> g
    void runShortcut(ij.macro.Program,int,java.lang.String) -> a
    java.lang.Thread getThread() -> a
    void run() -> run
ij.macro.Program -> ij.c.f:
    int maxSymbols -> l
    int maxProgramSize -> m
    int pc -> n
    int stLoc -> a
    int symTabLoc -> b
    ij.macro.Symbol[] table -> c
    ij.macro.Symbol[] systemTable -> o
    int[] code -> d
    int[] lineNumbers -> e
    ij.macro.Variable[] globals -> f
    boolean hasVars -> g
    boolean hasFunctions -> h
    int macroCount -> i
    java.util.Hashtable menus -> j
    boolean queueCommands -> k
    int[] getCode() -> a
    ij.macro.Symbol[] getSymbolTable() -> b
    void addKeywords() -> i
    void addFunctions() -> j
    void addNumericFunctions() -> k
    void addStringFunctions() -> l
    void addArrayFunctions() -> m
    void addSymbol(ij.macro.Symbol) -> a
    void addToken(int,int) -> a
    ij.macro.Symbol lookupWord(java.lang.String) -> a
    void saveGlobals(ij.macro.Interpreter) -> a
    void dumpSymbolTable() -> c
    void dumpProgram() -> d
    ij.macro.Variable[] getGlobals() -> e
    boolean hasVars() -> f
    int macroCount() -> g
    java.lang.String decodeToken(int,int) -> b
    java.util.Hashtable getMenus() -> h
    boolean hasWord(java.lang.String) -> b
ij.macro.ReturnException -> ij.c.g:
    double value -> a
    java.lang.String str -> b
    ij.macro.Variable[] array -> c
    int arraySize -> d
ij.macro.Symbol -> ij.c.h:
    int type -> a
    double value -> b
    java.lang.String str -> c
    java.lang.String toString() -> toString
ij.macro.Tokenizer -> ij.c.i:
    java.io.StreamTokenizer st -> a
    int token -> b
    java.lang.String tokenString -> c
    double tokenValue -> d
    ij.macro.Program pgm -> e
    int lineNumber -> f
    ij.macro.Program tokenize(java.lang.String) -> a
    double getHexConstant() -> a
    boolean tryScientificNotation() -> b
    void addUserFunctions() -> c
ij.macro.Variable -> ij.c.j:
    int symTabIndex -> a
    double value -> b
    java.lang.String str -> c
    ij.macro.Variable[] array -> d
    int arraySize -> e
    double getValue() -> a
    double convertToDouble() -> f
    void setValue(double) -> a
    java.lang.String getString() -> b
    void setString(java.lang.String) -> a
    ij.macro.Variable[] getArray() -> c
    void setArray(ij.macro.Variable[]) -> a
    void setArraySize(int) -> a
    int getArraySize() -> d
    int getType() -> e
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
ij.measure.Calibration -> ij.d.a:
    double pixelWidth -> a
    double pixelHeight -> b
    double pixelDepth -> c
    double frameInterval -> d
    double fps -> e
    boolean loopBackAndForth -> k
    boolean loop -> f
    double xOrigin -> g
    double yOrigin -> h
    double zOrigin -> i
    java.lang.String info -> j
    double[] coefficients -> l
    java.lang.String unit -> m
    java.lang.String zunit -> n
    java.lang.String units -> o
    java.lang.String valueUnit -> p
    java.lang.String timeUnit -> q
    int function -> r
    float[] cTable -> s
    boolean invertedLut -> t
    int bitDepth -> u
    boolean zeroClip -> v
    boolean invertY -> w
    boolean scaled() -> a
    void setUnit(java.lang.String) -> a
    void setZUnit(java.lang.String) -> b
    java.lang.String getUnit() -> b
    java.lang.String getXUnit() -> c
    java.lang.String getYUnit() -> d
    java.lang.String getZUnit() -> e
    java.lang.String getUnits() -> f
    void setTimeUnit(java.lang.String) -> c
    java.lang.String getTimeUnit() -> g
    double getX(double) -> a
    double getY(double,int) -> a
    double getZ(double) -> b
    double getRawX(double) -> c
    double getRawY(double,int) -> b
    void setFunction(int,double[],java.lang.String) -> a
    void setFunction(int,double[],java.lang.String,boolean) -> a
    void setImage(ij.ImagePlus) -> a
    void disableDensityCalibration() -> h
    java.lang.String getValueUnit() -> i
    double[] getCoefficients() -> j
    boolean calibrated() -> k
    int getFunction() -> l
    float[] getCTable() -> m
    void makeCTable() -> q
    double getCValue(int) -> a
    double getCValue(double) -> d
    double getRawValue(double) -> e
    java.lang.Object clone() -> clone
    boolean isSigned16Bit() -> n
    void setSigned16BitCalibration() -> o
    boolean zeroClip() -> p
    void setInvertY(boolean) -> a
    void setLoopBackAndForth(boolean) -> b
    java.lang.String toString() -> toString
ij.measure.CurveFitter -> ij.d.b:
    java.lang.String[] fitList -> a
    java.lang.String[] fList -> b
    int fitType -> c
    double[] xData -> d
    double[] yData -> e
    double[] xDataSave -> f
    double[] yDataSave -> g
    int numPoints -> h
    double ySign -> i
    double sumY -> j
    double sumY2 -> k
    int numParams -> l
    double[] initialParams -> m
    double[] initialParamVariations -> n
    double[] minimizerInitialParams -> o
    double[] minimizerInitialParamVariations -> p
    double maxRelError -> q
    long time -> r
    int customParamCount -> s
    java.lang.String customFormula -> t
    ij.macro.Interpreter macro -> u
    int macroStartProgramCounter -> v
    int numRegressionParams -> w
    int offsetParam -> x
    int factorParam -> y
    boolean hasSlopeParam -> z
    double[] finalParams -> A
    boolean linearRegressionUsed -> B
    boolean restrictPower -> C
    ij.measure.Minimizer minimizer -> D
    int minimizerStatus -> E
    java.lang.String errorString -> F
    java.util.Hashtable namesTable -> G
    void doFit(int,boolean) -> a
    int doCustomFit(java.lang.String,double[],boolean) -> a
    int getNumParams() -> a
    double f(double[],double) -> a
    double f(int,double[],double) -> a
    double[] getParams() -> b
    double getSumResidualsSqr() -> c
    double getSD() -> l
    double getRSquared() -> d
    int getStatus() -> e
    java.lang.String getStatusString() -> f
    java.lang.String getResultString() -> g
    double[] getXPoints() -> h
    double[] getYPoints() -> i
    java.lang.String getName() -> j
    java.lang.String getFormula() -> k
    int getFitCode(java.lang.String) -> a
    double userFunction$4964216e(double[]) -> a
    void minimizerParamsToFullParams(double[],boolean) -> a
    void doRegression(double[]) -> b
    void modifyInitialParamsAndVariations() -> m
    boolean makeInitialParamsAndVariations(int) -> a
    void calculateSumYandY2() -> n
    boolean isModifiedFitType(int) -> b
    boolean prepareModifiedFitType(int) -> c
    void settingsDialog() -> o
ij.measure.Minimizer -> ij.d.c:
    java.lang.String[] STATUS_STRING -> a
    int numParams -> b
    int numVertices -> c
    int numExtraArrayElements -> d
    ij.measure.UserFunction userFunction -> e
    double maxRelError -> f
    double maxAbsError -> g
    int maxIter -> h
    int numIter -> i
    int numCompletedMinimizations -> j
    int maxRestarts -> k
    boolean useSingleThread -> l
    int status -> m
    boolean wasInitialized -> n
    double[] result -> o
    java.util.Vector resultsVector -> p
    void setFunction(ij.measure.UserFunction,int) -> a
    int minimize(double[],double[]) -> a
    double[] getParams() -> a
    int getIterations() -> b
    void setMaxIterations(int) -> a
    int getMaxIterations() -> c
    void setMaxRestarts(int) -> b
    int getMaxRestarts() -> d
    int getCompletedMinimizations() -> e
    void setMaxError(double,double) -> a
    void setMaximumThreads(int) -> c
    void setExtraArrayElements(int) -> d
    void minimizeOnce(double[],double[],int) -> a
    int minimize(double[][]) -> a
    void getVertexAndEvaluate(double[],double[],double,double[]) -> a
    void getCenter(double[][],int,double[]) -> a
    boolean belowErrorLimit(double,double,double) -> a
    double[][] makeSimplex(double[],double[],java.util.Random) -> a
    boolean initializeSimplex(double[][],double[],java.util.Random) -> a
    double[] makeNewParamVariations(double[][],int,double[],double[]) -> a
    void evaluate(double[]) -> a
    void copyVertex(double[],double[]) -> b
    void order(double[][],int[]) -> a
    void showSimplex(double[][],java.lang.String) -> a
    void showVertex(double[],java.lang.String) -> a
    void access$000(ij.measure.Minimizer,double[],double[],int) -> a
ij.measure.Minimizer$1 -> ij.d.d:
    double[] val$initialParams -> a
    double[] val$initialParamVariations -> b
    int val$seed -> c
    ij.measure.Minimizer this$0 -> d
    void run() -> run
ij.measure.ResultsTable -> ij.d.e:
    java.lang.String[] defaultHeadings -> a
    int maxRows -> b
    int maxColumns -> c
    java.lang.String[] headings -> d
    boolean[] keep -> e
    int counter -> f
    double[][] columns -> g
    java.lang.String[] rowLabels -> h
    int lastColumn -> i
    java.lang.StringBuffer sb -> j
    int precision -> k
    java.lang.String rowLabelHeading -> l
    char delimiter -> m
    boolean showRowNumbers -> n
    boolean autoFormat -> o
    java.text.DecimalFormat[] df -> p
    java.text.DecimalFormat[] sf -> q
    java.text.DecimalFormatSymbols dfs -> r
    ij.measure.ResultsTable getResultsTable() -> a
    void incrementCounter() -> b
    void addColumns() -> k
    int getCounter() -> c
    void addValue(int,double) -> a
    void addValue(java.lang.String,double) -> a
    void addLabel(java.lang.String,java.lang.String) -> a
    void setLabel(java.lang.String,int) -> a
    void disableRowLabels() -> d
    float[] getColumn(int) -> a
    boolean columnExists(int) -> b
    int getColumnIndex(java.lang.String) -> a
    int getFreeColumn(java.lang.String) -> e
    double getValueAsDouble(int,int) -> a
    float getValue(int,int) -> b
    double getValue(java.lang.String,int) -> b
    java.lang.String getLabel(int) -> c
    void setValue(java.lang.String,int,double) -> a
    java.lang.String getColumnHeadings() -> e
    java.lang.String getColumnHeading(int) -> d
    java.lang.String getRowAsString(int) -> e
    void setDefaultHeadings() -> f
    void setPrecision(int) -> f
    void showRowNumbers(boolean) -> a
    java.lang.String d2s(double,int) -> a
    void deleteRow(int) -> g
    void reset() -> g
    int getLastColumn() -> h
    void addResults() -> i
    void updateResults() -> j
    void show(java.lang.String) -> b
    void update(int,ij.ImagePlus,ij.gui.Roi) -> a
    ij.measure.ResultsTable open(java.lang.String) -> c
    int openNonNumericTable$6c4332c0(java.lang.String,java.lang.String[],java.lang.String) -> a
    void saveAs(java.lang.String) -> d
    java.lang.String getDefaultHeading(int) -> h
    java.lang.Object clone() -> clone
    java.lang.String toString() -> toString
ij.measure.SplineFitter -> ij.d.f:
    double[] y2 -> a
    void initSpline(float[],float[],int) -> a
    double evalSpline(float[],float[],int,double) -> a
ij.measure.UserFunction -> ij.d.g:
    double userFunction$4964216e(double[]) -> a
ij.plugin.AVI_Reader -> ij.e.a:
    boolean staticConvertToGray -> a
    boolean staticFlipVertical -> b
    boolean staticIsVirtual -> c
    int firstFrame -> d
    int lastFrame -> e
    boolean convertToGray -> f
    boolean flipVertical -> g
    boolean isVirtual -> h
    java.io.RandomAccessFile raFile -> i
    java.lang.String raFilePath -> j
    boolean headerOK -> k
    int streamNumber -> l
    int type0xdb -> m
    int type0xdc -> n
    long fileSize -> o
    long headerPositionEnd -> p
    long indexPosition -> q
    long indexPositionEnd -> r
    long moviPosition -> s
    int paddingGranularity -> t
    int frameNumber -> u
    int lastFrameToRead -> v
    int totalFramesFromIndex -> w
    boolean indexForCountingOnly -> x
    int dataCompression -> y
    boolean isPlanarFormat -> z
    int scanLineSize -> A
    boolean dataTopDown -> B
    java.awt.image.ColorModel cm -> C
    boolean variableLength -> D
    java.util.Vector frameInfos -> E
    ij.ImageStack stack -> F
    ij.ImagePlus imp -> G
    boolean verbose -> H
    long startTime -> I
    boolean aborting -> J
    int dwMicroSecPerFrame -> K
    int dwMaxBytesPerSec -> L
    int dwReserved1 -> M
    int dwFlags -> N
    int dwTotalFrames -> O
    int dwInitialFrames -> P
    int dwStreams -> Q
    int dwSuggestedBufferSize -> R
    int dwWidth -> S
    int dwHeight -> T
    int fccStreamHandler -> U
    int dwStreamFlags -> V
    int dwPriorityLanguage -> W
    int dwStreamInitialFrames -> X
    int dwStreamScale -> Y
    int dwStreamRate -> Z
    int dwStreamStart -> aa
    int dwStreamLength -> ab
    int dwStreamSuggestedBufferSize -> ac
    int dwStreamQuality -> ad
    int dwStreamSampleSize -> ae
    int biSize -> af
    int biWidth -> ag
    int biHeight -> ah
    short biPlanes -> ai
    short biBitCount -> aj
    int biCompression -> ak
    int biSizeImage -> al
    int biXPelsPerMeter -> am
    int biYPelsPerMeter -> an
    int biClrUsed -> ao
    int biClrImportant -> ap
    byte[] HUFFMAN_TABLES -> aq
    void run(java.lang.String) -> b_
    ij.ImagePlus getImagePlus() -> k
    ij.ImageStack makeStack(java.lang.String,int,int,boolean,boolean,boolean) -> a
    ij.process.ImageProcessor getProcessor(int) -> e
    int getWidth() -> b
    int getHeight() -> c
    int getSize() -> e
    java.lang.String getSliceLabel(int) -> c
    void deleteSlice(int) -> a
    void openAndReadHeader(java.lang.String) -> b
    long findFourccAndRead(int,boolean,long,boolean) -> a
    long findFourccAndSkip(int,boolean,long) -> a
    void readAvi2Index$1349ef() -> m
    void readOldFrameIndex(long) -> a
    void readBitMapInfo(long) -> b
    void readMovieData(long) -> c
    java.lang.Object readFrame(java.io.RandomAccessFile,long,int) -> a
    java.lang.Object readFixedLengthFrame(java.io.RandomAccessFile,int) -> a
    void unpack8bit(byte[],int,byte[],int,int) -> a
    void unpackGray(byte[],int,byte[],int,int) -> b
    void unpackShort(byte[],int,short[],int,int) -> a
    void unpack(byte[],int,int[],int,int) -> a
    void unpackPlanarImage(byte[],int[],boolean) -> a
    void writeRGBfromYUV(int,int,int,int[],int) -> a
    long readLong() -> n
    int readInt() -> o
    short readShort() -> p
    int readType(long) -> d
    java.lang.String frameLabel(long) -> e
    java.lang.String posSizeString(long) -> f
    java.lang.String posSizeString(long,long) -> a
    java.lang.String timeString() -> q
    java.lang.String fourccString(int) -> f
    void error(java.lang.String) -> c
    java.lang.String exceptionMessage(java.lang.Exception) -> a
    byte[] access$000() -> l
ij.plugin.AVI_Reader$raInputStream -> ij.e.b:
    java.io.RandomAccessFile rFile -> a
    int readableSize -> b
    boolean fixMJPG -> c
    byte[] buffer -> d
    int bufferPointer -> e
    int bufferLength -> f
    int available() -> available
    int read() -> read
    int read(byte[],int,int) -> read
    void addHuffmanTables() -> a
    int readShort(int) -> a
ij.plugin.Animator -> ij.e.c:
    double animationRate -> a
    int firstFrame -> b
    int lastFrame -> c
    ij.ImagePlus imp -> d
    ij.gui.StackWindow swin -> e
    int slice -> f
    int nSlices -> g
    void run(java.lang.String) -> b_
    void stopAnimation() -> b
    void startAnimation() -> c
    double getFrameRate() -> a
ij.plugin.Colors -> ij.e.d:
    java.lang.String[] colors -> a
    java.awt.Choice fchoice -> b
    java.awt.Choice bchoice -> c
    java.awt.Choice schoice -> d
    java.awt.Color fc2 -> e
    java.awt.Color bc2 -> f
    java.awt.Color sc2 -> g
    void run(java.lang.String) -> b_
    java.lang.String getColorName(java.awt.Color,java.lang.String) -> a
    java.awt.Color getColor(java.lang.String,java.awt.Color) -> a
    java.awt.Color decode(java.lang.String,java.awt.Color) -> b
    java.lang.String hexToColor(java.lang.String) -> b
    java.lang.String colorToString(java.awt.Color) -> a
    float parseHex(java.lang.String) -> c
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
ij.plugin.CompositeConverter -> ij.e.e:
    void run(java.lang.String) -> b_
ij.plugin.DICOM -> ij.e.f:
    boolean showErrors -> h
    java.io.BufferedInputStream inputStream -> i
    void run(java.lang.String) -> b_
ij.plugin.DicomDecoder -> ij.e.g:
    java.util.Properties dictionary -> f
    java.lang.String directory -> g
    java.lang.String fileName -> h
    java.io.BufferedInputStream f -> i
    int location -> j
    boolean littleEndian -> k
    int elementLength -> l
    int vr -> m
    byte[] vrLetters -> n
    java.lang.StringBuffer dicomInfo -> o
    boolean dicmFound -> p
    boolean oddLocations -> q
    boolean bigEndianTransferSyntax -> r
    double windowCenter -> a
    double windowWidth -> b
    double rescaleIntercept -> c
    double rescaleSlope -> d
    boolean inSequence -> s
    java.io.BufferedInputStream inputStream -> e
    java.lang.String modality -> t
    char[] buf8 -> u
    char[] buf10 -> v
    java.lang.String getString(int) -> a
    int getByte() -> d
    int getShort() -> e
    byte[] getLut(int) -> b
    ij.io.FileInfo getFileInfo() -> a
    java.lang.String getDicomInfo() -> b
    void addInfo(int,java.lang.String) -> a
    void addInfo(int,int) -> a
    java.lang.String tag2hex(int) -> c
    double s2d(java.lang.String) -> a
    boolean dicmFound() -> c
ij.plugin.DicomDictionary -> ij.e.h:
    java.lang.String[] dict -> a
    java.util.Properties getDictionary() -> a
ij.plugin.HyperStackConverter -> ij.e.i:
    java.lang.String[] orders -> a
    int order -> b
    boolean splitRGB -> c
    void run(java.lang.String) -> b_
    void shuffle(ij.ImagePlus,int) -> a
ij.plugin.ImageCalculator -> ij.e.j:
    java.lang.String[] operators -> a
    java.lang.String[] lcOperators -> b
    int operator -> c
    java.lang.String title1 -> d
    java.lang.String title2 -> e
    boolean createWindow -> f
    boolean floatResult -> g
    boolean processStack -> h
    void run(java.lang.String) -> b_
    void calculate(java.lang.String,ij.ImagePlus,ij.ImagePlus) -> a
    ij.ImagePlus calculate(ij.ImagePlus,ij.ImagePlus,boolean) -> a
    ij.ImagePlus doStackOperation(ij.ImagePlus,ij.ImagePlus) -> a
    ij.ImagePlus doOperation(ij.ImagePlus,ij.ImagePlus) -> b
    int getBlitterMode() -> a
    ij.ImagePlus duplicateStack(ij.ImagePlus) -> a
ij.plugin.JavaProperties -> ij.e.k:
    java.lang.StringBuffer sb -> a
    void run(java.lang.String) -> b_
    void show(java.lang.String) -> b
    void doFullDump() -> a
ij.plugin.MacroInstaller -> ij.e.l:
    int[] macroStarts -> a
    java.lang.String[] macroNames -> b
    int nMacros -> c
    ij.macro.Program pgm -> d
    java.lang.String shortcutsInUse -> e
    int inUseCount -> f
    int nShortcuts -> g
    int toolCount -> h
    java.lang.String text -> i
    java.lang.String anonymousName -> j
    java.awt.Menu macrosMenu -> k
    int autoRunCount -> l
    int autoRunAndHideCount -> m
    boolean openingStartupMacrosInEditor -> n
    boolean installTools -> o
    java.lang.String defaultDir -> p
    java.lang.String fileName -> q
    ij.plugin.MacroInstaller instance -> r
    ij.plugin.MacroInstaller listener -> s
    java.lang.Thread macroToolThread -> D
    void run(java.lang.String) -> b_
    void install() -> d
    int install(java.lang.String) -> b
    int install(java.lang.String,java.awt.Menu) -> a
    void installFile(java.lang.String) -> c
    void installTool(java.lang.String) -> d
    void installLibrary(java.lang.String) -> e
    void installFromIJJar(java.lang.String) -> f
    void installSingleTool(java.lang.String) -> l
    void installPopupMenu(java.lang.String,ij.macro.Program) -> a
    void removeShortcuts() -> e
    java.lang.String open(java.lang.String) -> m
    java.lang.String openFromIJJar(java.lang.String) -> g
    boolean runMacroTool(java.lang.String) -> h
    boolean runMenuTool(java.lang.String,java.lang.String) -> a
    boolean runMacroCommand(java.lang.String) -> i
    void runMacroShortcut(java.lang.String) -> j
    void runMacro(java.lang.String,ij.plugin.frame.Editor) -> a
    int getMacroCount() -> a
    ij.macro.Program getProgram() -> b
    boolean isAutoRunAndHide() -> c
    void setFileName(java.lang.String) -> k
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
ij.plugin.Macro_Runner -> ij.e.m:
    void run(java.lang.String) -> b_
    java.lang.String runMacroFile(java.lang.String,java.lang.String) -> a
    java.lang.String runMacro(java.lang.String,java.lang.String) -> b
    java.lang.String runMacroFromJar(java.lang.String,java.lang.String) -> d
    java.lang.String runMacroFromIJJar(java.lang.String,java.lang.String) -> e
    java.lang.String runJavaScript(java.lang.String,java.lang.String) -> c
ij.plugin.MeasurementsWriter -> ij.e.n:
    void run(java.lang.String) -> b_
    boolean save(java.lang.String) -> b
ij.plugin.Memory -> ij.e.o:
    java.lang.String s -> a
    int index1 -> b
    int index2 -> c
    java.io.File f -> d
    boolean fileMissing -> e
    void run(java.lang.String) -> b_
    long getMemorySetting() -> a
    long getMemorySetting(java.lang.String) -> b
ij.plugin.NewPlugin -> ij.e.p:
    int rows -> a
    int columns -> b
    int tableWidth -> c
    int tableHeight -> d
    int type -> e
    java.lang.String name -> f
    boolean monospaced -> g
    boolean menuBar -> h
    ij.plugin.frame.Editor ed -> i
    void run(java.lang.String) -> b_
    void createPlugin(java.lang.String,int,java.lang.String) -> a
    ij.plugin.frame.Editor getEditor() -> a
ij.plugin.Orthogonal_Views -> ij.e.q:
    ij.gui.ImageWindow win -> a
    ij.ImagePlus imp -> b
    boolean rgb -> c
    ij.ImageStack imageStack -> d
    boolean hyperstack -> e
    int currentChannel -> f
    int currentFrame -> g
    int currentMode -> h
    ij.gui.ImageCanvas canvas -> i
    boolean sticky -> j
    int xzID -> k
    int yzID -> l
    ij.plugin.Orthogonal_Views instance -> m
    ij.ImagePlus xz_image -> n
    ij.ImagePlus yz_image -> o
    ij.process.ImageProcessor fp1 -> p
    ij.process.ImageProcessor fp2 -> q
    double ax -> r
    double ay -> s
    double az -> t
    boolean flipXZ -> u
    int xyX -> v
    int xyY -> w
    ij.measure.Calibration cal -> x
    ij.plugin.Orthogonal_Views$Updater updater -> y
    double min -> z
    double max -> A
    boolean syncZoom -> B
    java.awt.Point crossLoc -> C
    int previousID -> D
    int previousX -> E
    int previousY -> F
    java.awt.Rectangle startingSrcRect -> G
    void run(java.lang.String) -> b_
    ij.ImageStack getStack() -> c
    void calibrate() -> d
    void arrangeWindows$1385ff() -> e
    void updateZYView(java.awt.Point,ij.ImageStack) -> a
    void drawCross(ij.ImagePlus,java.awt.Point,java.awt.geom.GeneralPath) -> a
    void dispose() -> f
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseDragged(java.awt.event.MouseEvent) -> mouseDragged
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void mouseMoved(java.awt.event.MouseEvent) -> mouseMoved
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void imageClosed(ij.ImagePlus) -> a
    void imageOpened$3225e243() -> a
    void imageUpdated(ij.ImagePlus) -> b
    java.lang.String commandExecuting(java.lang.String) -> a
    void windowActivated(java.awt.event.WindowEvent) -> windowActivated
    void windowClosed(java.awt.event.WindowEvent) -> windowClosed
    void windowClosing(java.awt.event.WindowEvent) -> windowClosing
    void windowDeactivated(java.awt.event.WindowEvent) -> windowDeactivated
    void windowDeiconified(java.awt.event.WindowEvent) -> windowDeiconified
    void windowIconified(java.awt.event.WindowEvent) -> windowIconified
    void windowOpened(java.awt.event.WindowEvent) -> windowOpened
    void adjustmentValueChanged(java.awt.event.AdjustmentEvent) -> adjustmentValueChanged
    void mouseWheelMoved(java.awt.event.MouseWheelEvent) -> mouseWheelMoved
    void focusGained(java.awt.event.FocusEvent) -> focusGained
    void focusLost(java.awt.event.FocusEvent) -> focusLost
    ij.ImagePlus getImage() -> b
    boolean isOrthoViewsImage(ij.ImagePlus) -> c
    void access$000(ij.plugin.Orthogonal_Views) -> a
ij.plugin.Orthogonal_Views$Updater -> ij.e.r:
    long request -> a
    ij.plugin.Orthogonal_Views this$0 -> b
    void quit() -> a
    void run() -> run
ij.plugin.OverlayLabels -> ij.e.s:
    java.lang.String[] fontSizes -> a
    ij.gui.Overlay defaultOverlay -> b
    ij.ImagePlus imp -> c
    ij.gui.Overlay overlay -> d
    ij.gui.GenericDialog gd -> e
    boolean showLabels -> f
    boolean showNames -> g
    boolean drawBackgrounds -> h
    java.lang.String colorName -> i
    int fontSize -> j
    boolean bold -> k
    void run(java.lang.String) -> b_
    boolean dialogItemChanged(ij.gui.GenericDialog,java.awt.AWTEvent) -> a
    ij.gui.Overlay createOverlay() -> a
ij.plugin.PlugIn -> ij.e.t:
    void run(java.lang.String) -> b_
ij.plugin.RectToolOptions -> ij.e.u:
    ij.gui.GenericDialog gd -> a
    double defaultStrokeWidth -> b
    java.awt.Color defaultStrokeColor -> c
    void run(java.lang.String) -> b_
    boolean dialogItemChanged(ij.gui.GenericDialog,java.awt.AWTEvent) -> a
    java.awt.Color getDefaultStrokeColor() -> a
    float getDefaultStrokeWidth() -> b
ij.plugin.ScreenGrabber -> ij.e.v:
    void run(java.lang.String) -> b_
    ij.ImagePlus captureScreen() -> a
    ij.ImagePlus captureImage() -> b
ij.plugin.Straightener -> ij.e.w:
    boolean processStack -> a
    void run(java.lang.String) -> b_
    ij.process.ImageProcessor straighten(ij.ImagePlus,ij.gui.Roi,int) -> a
    ij.process.ImageProcessor straightenLine(ij.ImagePlus,int) -> a
    ij.process.ImageProcessor rotateLine(ij.ImagePlus,int) -> b
    ij.process.ImageProcessor straightenRGB(ij.ImagePlus,int) -> c
ij.plugin.Thresholder -> ij.e.x:
    java.lang.String[] methods -> a
    java.lang.String[] backgrounds -> b
    double minThreshold -> c
    double maxThreshold -> d
    boolean autoThreshold -> e
    boolean skipDialog -> f
    boolean fill1 -> g
    boolean fill2 -> h
    boolean useBW -> i
    boolean useLocal -> j
    boolean convertToMask -> k
    java.lang.String method -> l
    java.lang.String background -> m
    boolean staticUseLocal -> n
    java.lang.String staticMethod -> o
    java.lang.String staticBackground -> p
    ij.ImagePlus imp -> q
    java.util.Vector choices -> r
    void run(java.lang.String) -> b_
    void applyThreshold(ij.ImagePlus) -> a
    void autoThreshold(ij.process.ImageProcessor) -> a
    void setMethod(java.lang.String) -> b
    void setBackground(java.lang.String) -> c
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
    void updateThreshold(ij.ImagePlus) -> b
ij.plugin.WandToolOptions -> ij.e.y:
    java.lang.String[] modes -> a
    java.lang.String mode -> b
    double tolerance -> c
    void run(java.lang.String) -> b_
    java.lang.String getMode() -> a
    double getTolerance() -> b
ij.plugin.filter.Analyzer -> ij.e.a.a:
    ij.ImagePlus imp -> d
    ij.measure.ResultsTable rt -> e
    int measurements -> f
    int[] list -> g
    boolean unsavedMeasurements -> h
    int systemMeasurements -> i
    int markWidth -> a
    int precision -> j
    float[] umeans -> k
    ij.measure.ResultsTable systemRT -> l
    int redirectTarget -> m
    java.lang.String redirectTitle -> n
    ij.ImagePlus redirectImage -> o
    int firstParticle -> b
    int lastParticle -> c
    boolean summarized -> p
    boolean switchingModes -> q
    boolean showMin -> r
    int setup(java.lang.String,ij.ImagePlus) -> a
    void run(ij.process.ImageProcessor) -> a
    void measure() -> a
    boolean reset() -> h
    boolean isRedirectImage() -> b
    ij.ImagePlus getRedirectImageOrStack(ij.ImagePlus) -> b
    ij.ImagePlus getRedirectImage(ij.ImagePlus) -> a
    void saveResults(ij.process.ImageStatistics,ij.gui.Roi) -> a
    void clearSummary() -> i
    double getArea(java.awt.Polygon) -> a
    void displayResults() -> j
    int getCounter() -> c
    boolean resetCounter() -> d
    void setUnsavedMeasurements(boolean) -> a
    int getMeasurements() -> e
    void setMeasurements(int) -> a
    void setMeasurement(int,boolean) -> a
    void savePreferences(java.util.Properties) -> a
    ij.measure.ResultsTable getResultsTable() -> f
    int getPrecision() -> g
    void setPrecision(int) -> b
    int updateY(int,int) -> a
    double updateY(double,int) -> a
    void setOption(java.lang.String,boolean) -> a
    void setResultsTable(ij.measure.ResultsTable) -> a
ij.plugin.filter.ExtendedPlugInFilter -> ij.e.a.b:
    int showDialog(ij.ImagePlus,java.lang.String,ij.plugin.filter.PlugInFilterRunner) -> a
    void setNPasses(int) -> a
ij.plugin.filter.Filler -> ij.e.a.c:
    java.lang.String arg -> a
    ij.gui.Roi roi -> b
    ij.ImagePlus imp -> c
    int sliceCount -> d
    ij.process.ImageProcessor mask -> e
    boolean isTextRoi -> f
    int setup(java.lang.String,ij.ImagePlus) -> a
    void run(ij.process.ImageProcessor) -> a
    boolean isLineSelection() -> a
    boolean isStraightLine() -> b
    void draw(ij.process.ImageProcessor) -> b
    void drawLabel(ij.process.ImageProcessor) -> c
    void drawLabel(ij.ImagePlus,ij.process.ImageProcessor,int,java.awt.Rectangle) -> a
    void clearOutside(ij.process.ImageProcessor) -> d
ij.plugin.filter.Filters -> ij.e.a.d:
    double sd -> a
    java.lang.String arg -> b
    int slice -> c
    boolean canceled -> d
    int setup(java.lang.String,ij.ImagePlus) -> a
    void run(ij.process.ImageProcessor) -> a
    double getSD() -> a
ij.plugin.filter.GaussianBlur -> ij.e.a.e:
    double sigma -> a
    boolean sigmaScaled -> b
    int flags -> c
    ij.ImagePlus imp -> d
    boolean hasScale -> e
    int nPasses -> f
    int nChannels -> g
    int pass -> h
    int setup(java.lang.String,ij.ImagePlus) -> a
    int showDialog(ij.ImagePlus,java.lang.String,ij.plugin.filter.PlugInFilterRunner) -> a
    boolean dialogItemChanged(ij.gui.GenericDialog,java.awt.AWTEvent) -> a
    void setNPasses(int) -> a
    void run(ij.process.ImageProcessor) -> a
    void blur1Direction(ij.process.FloatProcessor,double,double,boolean,int) -> a
    void showProgress(double) -> a
    void access$000(ij.plugin.filter.GaussianBlur,double) -> a
    void access$100(float[],float[],float[],int,int,int,int,int,int) -> a
    void access$200(float[],float[],float[][],int,int,int,int,int,int) -> a
    void access$300(float[],float[],float[],int,int,int,int,int,int) -> b
ij.plugin.filter.GaussianBlur$1 -> ij.e.a.f:
    java.lang.Thread[] val$lineThreads -> a
    int val$lineFrom -> b
    int val$ti -> c
    int val$lineInc -> d
    int val$lineTo -> e
    int val$numThreads -> f
    boolean val$doDownscaling -> g
    float[] val$pixels -> h
    float[] val$cache1 -> i
    float[] val$downscaleKernel -> j
    int val$reduceBy -> k
    int val$unscaled0 -> l
    int val$length -> m
    int val$pointInc -> n
    int val$newLength -> o
    float[] val$cache2 -> p
    float[][] val$gaussKernel -> q
    float[] val$upscaleKernel -> r
    int val$writeFrom -> s
    int val$writeTo -> t
    int val$readFrom -> u
    int val$readTo -> v
    ij.plugin.filter.GaussianBlur this$0 -> w
    void run() -> run
ij.plugin.filter.Info -> ij.e.a.g:
    ij.ImagePlus imp -> a
    int setup(java.lang.String,ij.ImagePlus) -> a
    void run(ij.process.ImageProcessor) -> a
    java.lang.String getImageInfo(ij.ImagePlus,ij.process.ImageProcessor) -> a
    java.lang.String d2s(double) -> a
    double yy(double,ij.ImagePlus) -> a
    void showInfo(java.lang.String,int,int) -> a
ij.plugin.filter.ParticleAnalyzer -> ij.e.a.h:
    double staticMinSize -> a
    double staticMaxSize -> b
    boolean pixelUnits -> c
    int staticOptions -> d
    java.lang.String[] showStrings -> e
    double staticMinCircularity -> f
    double staticMaxCircularity -> g
    java.lang.String prevHdr -> h
    int staticShowChoice -> i
    ij.ImagePlus imp -> j
    ij.measure.ResultsTable rt -> k
    ij.plugin.filter.Analyzer analyzer -> l
    int slice -> m
    boolean processStack -> n
    boolean showResults -> o
    boolean excludeEdgeParticles -> p
    boolean resetCounter -> q
    boolean showProgress -> r
    boolean recordStarts -> s
    boolean displaySummary -> t
    boolean floodFill -> u
    boolean addToManager -> v
    boolean inSituShow -> w
    boolean showResultsWindow -> x
    java.lang.String summaryHdr -> y
    double level1 -> z
    double level2 -> A
    double minSize -> B
    double maxSize -> C
    double minCircularity -> D
    double maxCircularity -> E
    int showChoice -> F
    int options -> G
    int measurements -> H
    ij.measure.Calibration calibration -> I
    double fillColor -> J
    ij.process.ImageProcessor drawIP -> K
    int width -> L
    int height -> M
    boolean canceled -> N
    ij.ImageStack outlines -> O
    java.awt.image.IndexColorModel customLut -> P
    int particleCount -> Q
    int maxParticleCount -> R
    int totalCount -> S
    ij.text.TextWindow tw -> T
    ij.util.StringSorter wand$600378db -> U
    int imageType -> V
    int imageType2 -> W
    boolean roiNeedsImage -> X
    int minX -> Y
    int maxX -> Z
    int minY -> aa
    int maxY -> ab
    ij.ImagePlus redirectImp -> ac
    ij.process.ImageProcessor redirectIP -> ad
    ij.process.PolygonFiller pf -> ae
    ij.gui.Roi saveRoi -> af
    int beginningCount -> ag
    java.awt.Rectangle r -> ah
    ij.process.ImageProcessor mask -> ai
    double totalArea -> aj
    ij.process.FloodFiller ff -> ak
    java.awt.Polygon polygon -> al
    ij.plugin.frame.RoiManager roiManager -> am
    ij.ImagePlus outputImage -> an
    int roiType -> ao
    int wandMode -> ap
    ij.gui.Overlay overlay -> aq
    boolean blackBackground -> ar
    int defaultFontSize -> as
    int nextFontSize -> at
    int nextLineWidth -> au
    int fontSize -> av
    int lineWidth -> aw
    int setup(java.lang.String,ij.ImagePlus) -> a
    void run(ij.process.ImageProcessor) -> a
    void updateSliceSummary() -> a
    java.lang.String addMean(int,java.lang.String,int) -> a
    boolean eraseOutsideRoi(ij.process.ImageProcessor,java.awt.Rectangle,ij.process.ImageProcessor) -> a
    void analyzeParticle(int,int,ij.ImagePlus,ij.process.ImageProcessor) -> a
    void drawOutline(ij.process.ImageProcessor,ij.gui.Roi,int) -> a
    void savePreferences(java.util.Properties) -> a
ij.plugin.filter.PlugInFilter -> ij.e.a.i:
    int setup(java.lang.String,ij.ImagePlus) -> a
    void run(ij.process.ImageProcessor) -> a
ij.plugin.filter.PlugInFilterRunner -> ij.e.a.j:
    java.lang.String command -> a
    java.lang.Object theFilter -> b
    ij.ImagePlus imp -> c
    int flags -> d
    boolean snapshotDone -> e
    boolean previewCheckboxOn -> f
    boolean bgPreviewOn -> g
    boolean bgKeepPreview -> h
    java.lang.Thread previewThread -> i
    ij.gui.GenericDialog gd -> j
    java.awt.Checkbox previewCheckbox -> k
    long previewTime -> l
    boolean ipChanged -> m
    int processedAsPreview -> n
    java.util.Hashtable slicesForThread -> o
    java.util.Hashtable roisForThread -> p
    java.util.Hashtable sliceForThread -> q
    int nPasses -> r
    int pass -> s
    boolean doStack -> t
    void processStack(int,int) -> a
    void prepareProcessor(ij.process.ImageProcessor,ij.ImagePlus) -> a
    void processOneImage(ij.process.ImageProcessor,ij.process.FloatProcessor,boolean) -> a
    void processChannelUsingThreads(ij.process.ImageProcessor) -> a
    void wrongType(int,java.lang.String) -> a
    void announceSliceNumber(int) -> a
    void run() -> run
    void killPreview() -> a
    void waitForPreviewDone() -> b
    void setDialog(ij.gui.GenericDialog) -> a
    boolean dialogItemChanged(ij.gui.GenericDialog,java.awt.AWTEvent) -> a
ij.plugin.filter.ThresholdToSelection -> ij.e.a.k:
    ij.ImagePlus image -> a
    ij.process.ImageProcessor ip -> b
    float min -> c
    float max -> d
    int w -> e
    int h -> f
    void run(ij.process.ImageProcessor) -> a
    ij.gui.Roi convert(ij.process.ImageProcessor) -> b
    int setup(java.lang.String,ij.ImagePlus) -> a
ij.plugin.filter.ThresholdToSelection$Outline -> ij.e.a.l:
    int[] x -> a
    int[] y -> b
    int first -> c
    int last -> d
    int reserved -> e
    void needs(int,int) -> c
    void push(int,int) -> a
    void shift(int,int) -> b
    void push(ij.plugin.filter.ThresholdToSelection$Outline) -> a
    void shift(ij.plugin.filter.ThresholdToSelection$Outline) -> b
    java.awt.Polygon getPolygon() -> a
    java.lang.String toString() -> toString
ij.plugin.frame.Channels -> ij.e.b.a:
    java.lang.String[] modes -> a
    java.lang.String[] menuItems -> b
    java.lang.String moreLabel -> c
    java.awt.Choice choice -> d
    java.awt.Checkbox[] checkbox -> e
    java.awt.Button moreButton -> f
    java.awt.Frame instance -> g
    java.awt.Point location -> h
    java.awt.PopupMenu pm -> i
    void update() -> a
    ij.CompositeImage getImage() -> d
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    java.awt.Frame getInstance() -> b
    void close() -> c
ij.plugin.frame.ContrastAdjuster -> ij.e.b.b:
    java.lang.String[] sixteenBitRanges -> a
    java.lang.String[] channelLabels -> b
    java.lang.String[] altChannelLabels -> c
    int[] channelConstants -> d
    ij.plugin.frame.ContrastPlot plot -> e
    java.lang.Thread thread -> f
    java.awt.Frame instance -> g
    int minSliderValue -> h
    int maxSliderValue -> i
    int brightnessValue -> j
    int contrastValue -> k
    int sliderRange -> l
    boolean doAutoAdjust -> m
    boolean doReset -> n
    boolean doSet -> o
    boolean doApplyLut -> p
    java.awt.Panel panel -> q
    java.awt.Button autoB -> r
    java.awt.Button resetB -> s
    java.awt.Button setB -> t
    java.awt.Button applyB -> u
    int previousImageID -> v
    int previousType -> w
    int previousSlice -> x
    java.lang.Object previousSnapshot -> y
    ij.ImageJ ij -> z
    double min -> A
    double max -> B
    double defaultMin -> C
    double defaultMax -> D
    int contrast -> E
    int brightness -> F
    boolean RGBImage -> G
    java.awt.Scrollbar minSlider -> H
    java.awt.Scrollbar maxSlider -> I
    java.awt.Scrollbar contrastSlider -> J
    java.awt.Scrollbar brightnessSlider -> K
    java.awt.Label minLabel -> L
    java.awt.Label maxLabel -> M
    java.awt.Label windowLabel -> N
    java.awt.Label levelLabel -> O
    boolean done -> P
    int autoThreshold -> Q
    java.awt.GridBagLayout gridbag -> R
    java.awt.GridBagConstraints c -> S
    int y -> T
    boolean windowLevel -> U
    boolean balance -> V
    java.awt.Font monoFont -> W
    java.awt.Font sanFont -> X
    int channels -> Y
    java.awt.Choice choice -> Z
    void run(java.lang.String) -> b_
    void addBalanceChoices() -> b
    void addLabel(java.lang.String,java.awt.Label) -> a
    void setup() -> d
    void adjustmentValueChanged(java.awt.event.AdjustmentEvent) -> adjustmentValueChanged
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void setMinAndMax(ij.ImagePlus,double,double) -> a
    void updatePlot() -> e
    void updateLabels(ij.ImagePlus) -> a
    void updateScrollBars(java.awt.Scrollbar,boolean) -> a
    int scaleDown(double) -> a
    void doMasking(ij.ImagePlus,ij.process.ImageProcessor) -> a
    void reset(ij.ImagePlus,ij.process.ImageProcessor) -> b
    void plotHistogram(ij.ImagePlus) -> b
    void apply(ij.ImagePlus,ij.process.ImageProcessor) -> c
    void setThreshold(ij.process.ImageProcessor) -> a
    void propagate(ij.ImagePlus) -> c
    void recordSetMinAndMax(double,double) -> a
    void run() -> run
    void close() -> c
    void windowActivated(java.awt.event.WindowEvent) -> windowActivated
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
    void update() -> a
ij.plugin.frame.ContrastPlot -> ij.e.b.c:
    double defaultMin -> a
    double defaultMax -> b
    double min -> c
    double max -> d
    int[] histogram -> e
    int hmax -> f
    java.awt.Image os -> g
    java.awt.Graphics osg -> h
    java.awt.Color color -> i
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    void setHistogram(ij.process.ImageStatistics,java.awt.Color) -> a
    void update(java.awt.Graphics) -> update
    void paint(java.awt.Graphics) -> paint
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
ij.plugin.frame.DisplayChangeListener -> ij.e.b.d:
ij.plugin.frame.Editor -> ij.e.b.e:
    java.lang.String JavaScriptIncludes -> b
    java.lang.String JS_NOT_FOUND -> a
    java.awt.TextArea ta -> c
    java.lang.String path -> d
    boolean changes -> e
    java.lang.String searchString -> f
    boolean caseSensitive -> g
    int lineNumber -> h
    int xoffset -> i
    int yoffset -> j
    int nWindows -> k
    java.awt.Menu fileMenu -> l
    java.util.Properties p -> m
    java.awt.MenuBar mb -> n
    java.awt.Menu macrosMenu -> o
    int eventCount -> p
    ij.plugin.MacroInstaller installer -> q
    java.lang.String defaultDir -> r
    boolean dontShowWindow -> s
    int[] sizes -> D
    int fontSize -> E
    java.awt.CheckboxMenuItem monospaced -> F
    boolean wholeWords -> G
    boolean isMacroWindow -> H
    int debugStart -> I
    int debugEnd -> J
    ij.text.TextWindow debugWindow -> K
    boolean step -> L
    int previousLine -> M
    ij.plugin.frame.Editor instance -> N
    int runToLine -> O
    boolean fixedLineEndings -> P
    void setWindowTitle(java.lang.String) -> d
    void create(java.lang.String,java.lang.String) -> a
    void createMacro(java.lang.String,java.lang.String) -> b
    void installMacros(java.lang.String,boolean) -> a
    void open(java.lang.String,java.lang.String) -> c
    java.lang.String getText() -> a
    java.awt.TextArea getTextArea() -> b
    void save() -> g
    void compileAndRun() -> h
    void runMacro(boolean) -> b
    void evaluateJavaScript() -> i
    void evaluateLine() -> j
    void print() -> k
    java.lang.String detabLine(java.lang.String) -> e
    boolean copy() -> l
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    int getCurrentLine() -> m
    void enableDebugging() -> n
    void setDebugMode(int) -> a
    void textValueChanged(java.awt.event.TextEvent) -> textValueChanged
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
    void windowActivated(java.awt.event.WindowEvent) -> windowActivated
    void close() -> c
    void saveAs() -> o
    void updateClassName(java.lang.String,java.lang.String) -> d
    void find(java.lang.String) -> f
    void gotoLine() -> p
    void zapGremlins() -> q
    void changeFontSize(boolean) -> c
    void setFont() -> r
    java.lang.String getFontName() -> s
    void setFont(java.awt.Font) -> setFont
    void append(java.lang.String) -> b
    void setIsMacroWindow(boolean) -> a
    void lostOwnership(java.awt.datatransfer.Clipboard,java.awt.datatransfer.Transferable) -> lostOwnership
    int debug(ij.macro.Interpreter,int) -> a
    ij.plugin.frame.Editor getInstance() -> d
    java.lang.String getJSPrefix(java.lang.String) -> c
    void fixLineEndings() -> e
    boolean fileChanged() -> f
ij.plugin.frame.Fitter -> ij.e.b.f:
    double[] x -> a
    double[] y -> b
    ij.measure.CurveFitter cf -> c
    int fitType -> d
    java.lang.String equation -> e
    boolean doFit(int) -> a
    void plot(ij.measure.CurveFitter) -> a
    double getNum(java.util.StringTokenizer) -> a
    void open() -> a
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
ij.plugin.frame.LineWidthAdjuster -> ij.e.b.g:
    int value -> a
    boolean setText -> b
    ij.plugin.frame.LineWidthAdjuster instance -> c
    boolean done -> d
    void adjustmentValueChanged(java.awt.event.AdjustmentEvent) -> adjustmentValueChanged
    void textValueChanged(java.awt.event.TextEvent) -> textValueChanged
    void run() -> run
    void close() -> c
    void windowActivated(java.awt.event.WindowEvent) -> windowActivated
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
    void update() -> a
ij.plugin.frame.PlugInFrame -> ij.e.b.h:
    void run(java.lang.String) -> b_
    void windowClosing(java.awt.event.WindowEvent) -> windowClosing
    void close() -> c
    void windowActivated(java.awt.event.WindowEvent) -> windowActivated
    void focusGained(java.awt.event.FocusEvent) -> focusGained
    void windowOpened(java.awt.event.WindowEvent) -> windowOpened
    void windowClosed(java.awt.event.WindowEvent) -> windowClosed
    void windowIconified(java.awt.event.WindowEvent) -> windowIconified
    void windowDeiconified(java.awt.event.WindowEvent) -> windowDeiconified
    void windowDeactivated(java.awt.event.WindowEvent) -> windowDeactivated
    void focusLost(java.awt.event.FocusEvent) -> focusLost
ij.plugin.frame.Recorder -> ij.e.b.i:
    boolean record -> a
    boolean recordInMacros -> b
    java.lang.String[] modes -> c
    java.awt.Choice mode -> d
    java.awt.Button makeMacro -> e
    java.awt.Button help -> f
    java.awt.TextField fileName -> g
    java.awt.TextArea textArea -> h
    ij.plugin.frame.Recorder instance -> i
    java.lang.String commandName -> j
    java.lang.String commandOptions -> k
    java.lang.String defaultName -> l
    boolean recordPath -> m
    boolean scriptMode -> n
    boolean imageUpdated -> o
    int imageID -> p
    void record(java.lang.String) -> b
    void setCommand(java.lang.String) -> c
    java.lang.String fixPath(java.lang.String) -> g
    void record(java.lang.String,java.lang.String) -> a
    void record(java.lang.String,java.lang.String,java.lang.String) -> a
    void record(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    void record(java.lang.String,int) -> a
    void record(java.lang.String,int,int) -> a
    void record(java.lang.String,double,double) -> a
    void record(java.lang.String,int,int,int) -> a
    void record(java.lang.String,java.lang.String,int) -> a
    void record(java.lang.String,int,int,int,int) -> a
    void record(java.lang.String,int,int,int,int,int) -> a
    void record(java.lang.String,int,int,int,int,double) -> a
    void recordString(java.lang.String) -> d
    void recordCall(java.lang.String) -> e
    void recordRoi(java.awt.Polygon,int) -> a
    void recordOption(java.lang.String,java.lang.String) -> b
    void recordPath(java.lang.String,java.lang.String) -> c
    void recordOption(java.lang.String) -> f
    void checkForDuplicate(java.lang.String,java.lang.String) -> d
    java.lang.String trimKey(java.lang.String) -> h
    void saveCommand() -> b
    java.lang.String strip(java.lang.String) -> i
    java.lang.String addQuotes(java.lang.String) -> j
    java.lang.String getCommandOptions() -> d
    void createPlugin(java.lang.String,java.lang.String) -> e
    boolean scriptMode() -> e
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
    void setFileName() -> h
    void imageUpdated(ij.ImagePlus) -> b
    void imageOpened$3225e243() -> a
    void imageClosed(ij.ImagePlus) -> a
    void close() -> c
    java.lang.String getText() -> f
    ij.plugin.frame.Recorder getInstance() -> g
ij.plugin.frame.RoiManager -> ij.e.b.j:
    java.lang.String moreButtonLabel -> a
    java.awt.Panel panel -> b
    java.awt.Frame instance -> c
    javax.swing.JList list -> d
    javax.swing.DefaultListModel listModel -> e
    java.util.Hashtable rois -> f
    boolean macro -> g
    java.awt.PopupMenu pm -> h
    java.awt.Button moreButton -> i
    java.awt.Checkbox showAllCheckbox -> j
    java.awt.Checkbox labelsCheckbox -> k
    boolean measureAll -> l
    boolean onePerSlice -> m
    boolean restoreCentered -> n
    int prevID -> o
    boolean noUpdateMode -> p
    int defaultLineWidth -> q
    java.awt.Color defaultColor -> r
    boolean firstTime -> s
    int[] selectedIndexes -> t
    boolean appendResults -> u
    ij.measure.ResultsTable mmResults -> v
    void addButton(java.lang.String) -> c
    void addPopupItem(java.lang.String) -> d
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
    boolean addRoi(boolean) -> b
    boolean addRoi(ij.gui.Roi,boolean,java.awt.Color,int) -> a
    java.lang.String getHex(java.awt.Color) -> a
    void add(ij.ImagePlus,ij.gui.Roi,int) -> a
    java.lang.String getLabel(ij.ImagePlus,ij.gui.Roi,int) -> b
    void addAndDraw(boolean) -> c
    boolean delete(boolean) -> d
    boolean update(boolean) -> e
    boolean rename(java.lang.String) -> e
    java.lang.String promptForName(java.lang.String) -> f
    boolean restore(ij.ImagePlus,int,boolean) -> a
    boolean restoreWithoutUpdate(int) -> b
    int getSliceNumber(java.lang.String) -> g
    int getSliceNumber(ij.gui.Roi,java.lang.String) -> a
    void open(java.lang.String) -> h
    void openZip(java.lang.String) -> i
    java.lang.String getUniqueName(java.lang.String) -> j
    boolean save() -> e
    boolean saveMultiple(int[],java.lang.String) -> a
    boolean measure$134632() -> f
    boolean multiMeasure(java.lang.String) -> k
    int getColumnCount(ij.ImagePlus,int) -> b
    void multiPlot() -> g
    boolean drawOrFill(int) -> c
    void setProperties(java.awt.Color,int,java.awt.Color) -> a
    void combine() -> h
    void and() -> i
    void xor() -> j
    void sort() -> k
    void removeSliceInfo() -> l
    void split() -> m
    void showAll(int) -> d
    void updateShowAll() -> n
    int[] getAllIndexes() -> o
    ij.ImagePlus getImage() -> p
    boolean error(java.lang.String) -> l
    void processWindowEvent(java.awt.event.WindowEvent) -> processWindowEvent
    ij.plugin.frame.RoiManager getInstance() -> a
    int getCount() -> b
    int getRoiIndex(ij.gui.Roi) -> a
    int getSelectedIndex() -> d
    ij.gui.Roi[] getRoisAsArray() -> q
    boolean runCommand(java.lang.String) -> b
    boolean runCommand(java.lang.String,java.lang.String) -> a
    boolean runCommand$3b99a759(java.lang.String,double) -> a
    void select(int) -> a
    void select(ij.ImagePlus,int) -> a
    void select(int,boolean,boolean) -> a
    void setEditMode$1295b349(boolean) -> a
    void close() -> c
    void moveRoisToOverlay(ij.ImagePlus) -> a
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseWheelMoved(java.awt.event.MouseWheelEvent) -> mouseWheelMoved
    void setSelectedIndexes(int[]) -> a
    int[] getSelectedIndexes() -> r
    ij.gui.Overlay newOverlay() -> s
    void removeOverlay(ij.ImagePlus) -> b
    void setOverlay(ij.ImagePlus,ij.gui.Overlay) -> a
    boolean record() -> t
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void valueChanged(javax.swing.event.ListSelectionEvent) -> valueChanged
ij.plugin.frame.SyncWindows -> ij.e.b.k:
    java.util.Vector vwins -> a
    int oldX -> b
    int oldY -> c
    int x -> d
    int y -> e
    java.awt.List wList -> f
    java.util.Vector vListMap -> g
    ij.ImageJ ijInstance -> h
    double currentMag -> i
    java.awt.Rectangle currentSrcRect -> j
    ij.plugin.frame.SyncWindows instance -> k
    void setC(ij.gui.ImageWindow,int) -> a
    void setZ(ij.gui.ImageWindow,int) -> b
    void setT(ij.gui.ImageWindow,int) -> c
    void mouseMoved(java.awt.event.MouseEvent) -> mouseMoved
    void mouseDragged(java.awt.event.MouseEvent) -> mouseDragged
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
    void windowClosing(java.awt.event.WindowEvent) -> windowClosing
    void imageOpened$3225e243() -> a
    void imageClosed(ij.ImagePlus) -> a
    void imageUpdated(ij.ImagePlus) -> b
    java.awt.Rectangle boundingRect(int,int,int,int) -> a
    void updateWindowList() -> d
    void addSelections() -> e
    void addWindows(java.util.Vector) -> a
    void removeAllWindows() -> f
    void removeWindow(java.lang.Integer) -> a
    void drawSyncCursor(ij.gui.ImageCanvas,java.awt.Rectangle,int,int) -> a
    void storeCanvasState(ij.gui.ImageCanvas) -> a
    ij.ImagePlus getImageFromVector(int) -> a
    java.awt.Point getMatchingCoords(ij.gui.ImageCanvas,ij.gui.ImageCanvas,int,int) -> a
    java.awt.event.MouseEvent adaptEvent(java.awt.event.MouseEvent,java.awt.Canvas,java.awt.Point) -> a
    java.awt.Insets getInsets() -> getInsets
    void close() -> c
    ij.plugin.frame.SyncWindows getInstance() -> b
ij.plugin.frame.ThresholdAdjuster -> ij.e.b.l:
    java.lang.String[] modes -> a
    boolean backgroundToNaN -> b
    int mode -> c
    java.lang.String[] methodNames -> d
    java.lang.String method -> e
    ij.process.AutoThresholder thresholder -> f
    int minValue -> g
    int maxValue -> h
    boolean doAutoAdjust -> i
    boolean doReset -> j
    boolean doApplyLut -> k
    boolean doStateChange -> l
    boolean doSet -> m
    int previousImageID -> n
    int previousImageType -> o
    double previousMin -> p
    double previousMax -> q
    int previousSlice -> r
    double minThreshold -> s
    double maxThreshold -> t
    boolean done -> u
    boolean invertedLut -> v
    int lutColor -> w
    boolean useExistingTheshold -> x
    void adjustmentValueChanged(java.awt.event.AdjustmentEvent) -> adjustmentValueChanged
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
    ij.process.ImageProcessor setup(ij.ImagePlus) -> a
    void scaleUpAndSet(ij.process.ImageProcessor,double,double) -> a
    double scaleDown(ij.process.ImageProcessor,double) -> a
    double scaleUp(ij.process.ImageProcessor,double) -> b
    void updatePlot() -> d
    void updateLabels(ij.ImagePlus,ij.process.ImageProcessor) -> a
    void updateScrollBars() -> e
    void apply(ij.ImagePlus) -> b
    void runThresholdCommand() -> f
    void run() -> run
    void close() -> c
    void windowActivated(java.awt.event.WindowEvent) -> windowActivated
    java.lang.String getMethod() -> a
    java.lang.String getMode() -> b
ij.plugin.frame.ThresholdPlot -> ij.e.b.m:
    double minThreshold -> a
    double maxThreshold -> b
    ij.process.ImageStatistics stats -> g
    int[] histogram -> h
    java.awt.Color[] hColors -> i
    int hmax -> j
    java.awt.Image os -> k
    java.awt.Graphics osg -> l
    int mode -> c
    int originalModeCount -> d
    double stackMin -> e
    double stackMax -> f
    int imageID2 -> m
    boolean entireStack2 -> n
    double mean2 -> o
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    ij.process.ImageStatistics setHistogram(ij.ImagePlus,boolean) -> a
    void update(java.awt.Graphics) -> update
    void paint(java.awt.Graphics) -> paint
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
ij.plugin.frame.TrimmedLabel -> ij.e.b.n:
    int trim -> a
    java.awt.Dimension getMinimumSize() -> getMinimumSize
    java.awt.Dimension getPreferredSize() -> getPreferredSize
ij.plugin.tool.ArrowTool -> ij.e.c.a:
    ij.gui.Roi arrow -> a
    void mousePressed(ij.ImagePlus,java.awt.event.MouseEvent) -> a
    void mouseDragged(ij.ImagePlus,java.awt.event.MouseEvent) -> b
    void mouseReleased(ij.ImagePlus,java.awt.event.MouseEvent) -> c
    void showOptionsDialog() -> a
    java.lang.String getToolIcon() -> b
    java.lang.String getToolName() -> c
ij.plugin.tool.BrushTool -> ij.e.c.b:
    java.lang.String BRUSH_WIDTH_KEY -> a
    java.lang.String PENCIL_WIDTH_KEY -> b
    java.lang.String CIRCLE_NAME -> c
    java.lang.String widthKey -> d
    int width -> e
    ij.process.ImageProcessor ip -> f
    int mode -> g
    int xStart -> h
    int yStart -> i
    int oldWidth -> j
    boolean isPencil -> k
    ij.gui.Overlay overlay -> l
    ij.plugin.tool.BrushTool$Options options -> m
    ij.gui.GenericDialog gd -> n
    void run(java.lang.String) -> b_
    void mousePressed(ij.ImagePlus,java.awt.event.MouseEvent) -> a
    void mouseDragged(ij.ImagePlus,java.awt.event.MouseEvent) -> b
    void mouseReleased(ij.ImagePlus,java.awt.event.MouseEvent) -> c
    void showOptionsDialog() -> a
    java.lang.String getToolName() -> c
    java.lang.String getToolIcon() -> b
    void run() -> run
    ij.gui.GenericDialog access$000(ij.plugin.tool.BrushTool) -> a
    ij.plugin.tool.BrushTool$Options access$102(ij.plugin.tool.BrushTool,ij.plugin.tool.BrushTool$Options) -> a
    boolean access$200(ij.plugin.tool.BrushTool) -> b
    ij.gui.GenericDialog access$002(ij.plugin.tool.BrushTool,ij.gui.GenericDialog) -> a
    int access$300(ij.plugin.tool.BrushTool) -> c
    int access$302(ij.plugin.tool.BrushTool,int) -> a
    java.lang.String access$400(ij.plugin.tool.BrushTool) -> d
ij.plugin.tool.BrushTool$Options -> ij.e.c.c:
    ij.plugin.tool.BrushTool this$0 -> a
    boolean dialogItemChanged(ij.gui.GenericDialog,java.awt.AWTEvent) -> a
ij.plugin.tool.MacroToolRunner -> ij.e.c.d:
    ij.plugin.MacroInstaller installer -> a
    void runMacroTool(java.lang.String) -> b
    void runMenuTool(java.lang.String,java.lang.String) -> a
ij.plugin.tool.OverlayBrushTool -> ij.e.c.e:
    java.lang.String WIDTH_KEY -> a
    float width -> b
    int transparency -> c
    java.awt.BasicStroke stroke -> d
    java.awt.geom.GeneralPath path -> e
    int mode -> f
    float xStart -> g
    float yStart -> h
    float oldWidth -> i
    boolean newPath -> j
    ij.plugin.tool.OverlayBrushTool$Options options -> k
    ij.gui.GenericDialog gd -> l
    void mousePressed(ij.ImagePlus,java.awt.event.MouseEvent) -> a
    void mouseDragged(ij.ImagePlus,java.awt.event.MouseEvent) -> b
    void mouseReleased(ij.ImagePlus,java.awt.event.MouseEvent) -> c
    void showOptionsDialog() -> a
    java.lang.String getToolName() -> c
    java.lang.String getToolIcon() -> b
    void run() -> run
    ij.gui.GenericDialog access$000(ij.plugin.tool.OverlayBrushTool) -> a
    ij.plugin.tool.OverlayBrushTool$Options access$102(ij.plugin.tool.OverlayBrushTool,ij.plugin.tool.OverlayBrushTool$Options) -> a
    ij.gui.GenericDialog access$002(ij.plugin.tool.OverlayBrushTool,ij.gui.GenericDialog) -> a
    float access$200(ij.plugin.tool.OverlayBrushTool) -> b
    int access$300(ij.plugin.tool.OverlayBrushTool) -> c
    float access$202(ij.plugin.tool.OverlayBrushTool,float) -> a
    java.lang.String access$400() -> d
    int access$302(ij.plugin.tool.OverlayBrushTool,int) -> a
ij.plugin.tool.OverlayBrushTool$Options -> ij.e.c.f:
    ij.plugin.tool.OverlayBrushTool this$0 -> a
    boolean dialogItemChanged(ij.gui.GenericDialog,java.awt.AWTEvent) -> a
ij.plugin.tool.PixelInspectionTool -> ij.e.c.g:
    ij.plugin.tool.PixelInspector pi -> a
    void mousePressed(ij.ImagePlus,java.awt.event.MouseEvent) -> a
    void mouseDragged(ij.ImagePlus,java.awt.event.MouseEvent) -> b
    void showOptionsDialog() -> a
    void drawOutline(ij.ImagePlus,java.awt.event.MouseEvent) -> d
    java.lang.String getToolName() -> c
    java.lang.String getToolIcon() -> b
ij.plugin.tool.PixelInspector -> ij.e.c.h:
    int radius -> a
    int grayDisplayType -> c
    java.lang.String[] GRAY_DISPLAY_TYPES -> d
    int rgbDisplayType -> e
    java.lang.String[] RGB_DISPLAY_TYPES -> f
    int copyType -> g
    java.lang.String[] COPY_TYPES -> h
    int x0 -> i
    int y0 -> j
    int nextUpdate -> k
    ij.plugin.tool.PixelInspector instance -> b
    ij.plugin.tool.PixelInspectionTool tool -> l
    ij.ImageJ ij -> m
    ij.ImagePlus imp -> n
    int id -> o
    int bitDepth -> p
    int digits -> q
    boolean expMode -> r
    ij.gui.ImageCanvas canvas -> s
    java.lang.Thread bgThread -> t
    java.awt.Label[] labels -> u
    java.awt.Label prefsLabel -> v
    void init() -> d
    void close() -> c
    void removeOutline() -> e
    void addImageListeners() -> f
    void removeImageListeners() -> g
    void imageUpdated(ij.ImagePlus) -> b
    void imageOpened$3225e243() -> a
    void imageClosed(ij.ImagePlus) -> a
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    int getIndex(ij.gui.Overlay,java.lang.String) -> a
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
    void update(ij.ImagePlus,int,int,int) -> a
    void update(int) -> a
    void run() -> run
    void initializeLabels() -> h
    void showDialog() -> b
    java.lang.String int2hex(int,int) -> a
ij.plugin.tool.PlugInTool -> ij.e.c.i:
    void run(java.lang.String) -> b_
    void mousePressed(ij.ImagePlus,java.awt.event.MouseEvent) -> a
    void mouseReleased(ij.ImagePlus,java.awt.event.MouseEvent) -> c
    void mouseDragged(ij.ImagePlus,java.awt.event.MouseEvent) -> b
    java.lang.String getToolName() -> c
    java.lang.String getToolIcon() -> b
    void showOptionsDialog() -> a
    void runMacroTool(java.lang.String) -> b
    void runMenuTool(java.lang.String,java.lang.String) -> a
ij.process.AutoThresholder -> ij.f.a:
    java.lang.String[] mStrings -> a
    java.lang.String[] getMethods() -> a
    int getThreshold(ij.process.AutoThresholder$Method,int[]) -> a
    int getThreshold(java.lang.String,int[]) -> a
    boolean bimodalTest(double[]) -> a
    int IJIsoData(int[]) -> a
    int Mean(int[]) -> b
    double A(int[],int) -> a
    double B(int[],int) -> b
    double C(int[],int) -> c
    double partialSum(int[],int) -> d
ij.process.AutoThresholder$1 -> ij.f.b:
    int[] $SwitchMap$ij$process$AutoThresholder$Method -> a
ij.process.AutoThresholder$Method -> ij.f.c:
    ij.process.AutoThresholder$Method Default -> a
    ij.process.AutoThresholder$Method Huang -> b
    ij.process.AutoThresholder$Method Intermodes -> c
    ij.process.AutoThresholder$Method IsoData -> d
    ij.process.AutoThresholder$Method IJ_IsoData -> e
    ij.process.AutoThresholder$Method Li -> f
    ij.process.AutoThresholder$Method MaxEntropy -> g
    ij.process.AutoThresholder$Method Mean -> h
    ij.process.AutoThresholder$Method MinError -> i
    ij.process.AutoThresholder$Method Minimum -> j
    ij.process.AutoThresholder$Method Moments -> k
    ij.process.AutoThresholder$Method Otsu -> l
    ij.process.AutoThresholder$Method Percentile -> m
    ij.process.AutoThresholder$Method RenyiEntropy -> n
    ij.process.AutoThresholder$Method Shanbhag -> o
    ij.process.AutoThresholder$Method Triangle -> p
    ij.process.AutoThresholder$Method Yen -> q
    ij.process.AutoThresholder$Method[] $VALUES -> r
    ij.process.AutoThresholder$Method[] values() -> a
ij.process.ByteBlitter -> ij.f.d:
    ij.process.ByteProcessor ip -> a
    int width -> b
    int height -> c
    byte[] pixels -> d
    int transparent -> e
    void copyBits(ij.process.ImageProcessor,int,int,int) -> a
ij.process.ByteProcessor -> ij.f.e:
    byte[] pixels -> M
    byte[] snapshotPixels -> N
    int bgColor -> O
    boolean bgColorSet -> P
    int min -> Q
    int max -> R
    java.awt.Image createImage() -> a
    ij.process.ImageProcessor createProcessor(int,int) -> a
    ij.process.ImageProcessor crop() -> b
    ij.process.ImageProcessor duplicate() -> c
    void snapshot() -> d
    void reset() -> e
    void reset(ij.process.ImageProcessor) -> a
    void setSnapshotPixels(java.lang.Object) -> a
    java.lang.Object getSnapshotPixels() -> f
    void fill(ij.process.ImageProcessor) -> b
    int getPixel(int,int) -> b
    int get(int,int) -> c
    int get(int) -> a
    void set(int,int) -> d
    float getf(int,int) -> e
    void setf(int,int,float) -> a
    float getf(int) -> b
    void setf(int,float) -> a
    double getInterpolatedPixel(double,double) -> a
    int getPixelInterpolated(double,double) -> b
    float getPixelValue(int,int) -> f
    void setColor(java.awt.Color) -> a
    void setValue(double) -> a
    void setBackgroundValue(double) -> b
    double getBackgroundValue() -> g
    void putPixelValue(int,int,double) -> a
    void putPixel(int,int,int) -> a
    void drawPixel(int,int) -> g
    java.lang.Object getPixels() -> h
    java.lang.Object getPixelsCopy() -> ai
    void setPixels(java.lang.Object) -> b
    double getMin() -> i
    double getMax() -> j
    void setMinAndMax(double,double) -> c
    void resetMinAndMax() -> k
    void setThreshold(double,double,int) -> a
    void copyBits(ij.process.ImageProcessor,int,int,int) -> a
    void applyTable(int[]) -> a
    void convolve3x3(int[]) -> b
    void filter(int) -> c
    void filterEdge(int,byte[],int,int,int,int,int) -> a
    int getEdgePixel(byte[],int,int) -> a
    int getEdgePixel0(byte[],int,int,int) -> a
    void erode() -> l
    void dilate() -> m
    void medianFilter() -> d_
    void noise(double) -> c
    void scale(double,double) -> d
    double getInterpolatedPixel(double,double,byte[]) -> a
    ij.process.ImageProcessor resize(int,int) -> h
    void rotate(double) -> a_
    void flipVertical() -> o
    int[] getHistogram() -> p
    void threshold(int) -> d
    ij.process.FloatProcessor toFloat(int,ij.process.FloatProcessor) -> a
    void setPixels(int,ij.process.FloatProcessor) -> b
    boolean isBinary() -> q
    int getBitDepth() -> r
    byte[] create8BitImage() -> s
ij.process.ByteStatistics -> ij.f.f:
    void doCalculations(ij.ImagePlus,int,double,double) -> a
    void sum8BitHistograms(ij.ImagePlus) -> a
    void copyHistogram(int) -> a
    void getRawStatistics(long[],int,int) -> a
    void getRawMinAndMax(long[],int,int) -> b
    void sum16BitHistograms(ij.ImagePlus) -> b
    void getRaw16BitMinAndMax(long[],int,int) -> c
    void get16BitStatistics(long[],int,int) -> d
    double getMode(ij.measure.Calibration) -> a
ij.process.ColorBlitter -> ij.f.g:
    int width -> a
    int height -> b
    int[] pixels -> c
    int transparent -> d
    void copyBits(ij.process.ImageProcessor,int,int,int) -> a
ij.process.ColorProcessor -> ij.f.h:
    int[] pixels -> M
    int[] snapshotPixels -> N
    int bgColor -> O
    int min -> P
    int max -> Q
    java.awt.image.WritableRaster rgbRaster -> R
    java.awt.image.SampleModel rgbSampleModel -> S
    double rWeight -> T
    double gWeight -> U
    double bWeight -> V
    void createColorModel() -> ai
    java.awt.Image createImage() -> a
    void setColorModel(java.awt.image.ColorModel) -> a
    ij.process.ImageProcessor createProcessor(int,int) -> a
    void setColor(java.awt.Color) -> a
    void setColor(int) -> e
    void setValue(double) -> a
    void setBackgroundValue(double) -> b
    double getBackgroundValue() -> g
    double getMin() -> i
    double getMax() -> j
    void setMinAndMax(double,double) -> c
    void setMinAndMax(double,double,int) -> b
    void snapshot() -> d
    void reset() -> e
    void reset(ij.process.ImageProcessor) -> a
    void setSnapshotPixels(java.lang.Object) -> a
    java.lang.Object getSnapshotPixels() -> f
    void fill(ij.process.ImageProcessor) -> b
    java.lang.Object getPixelsCopy() -> aj
    int getPixel(int,int) -> b
    int get(int,int) -> c
    int get(int) -> a
    void set(int,int) -> d
    float getf(int,int) -> e
    void setf(int,int,float) -> a
    float getf(int) -> b
    void setf(int,float) -> a
    double getInterpolatedPixel(double,double) -> a
    int getPixelInterpolated(double,double) -> b
    void putPixel(int,int,int) -> a
    void putPixelValue(int,int,double) -> a
    float getPixelValue(int,int) -> f
    void drawPixel(int,int) -> g
    java.lang.Object getPixels() -> h
    void setPixels(java.lang.Object) -> b
    void getRGB(byte[],byte[],byte[]) -> a
    ij.process.ByteProcessor getChannel(int,ij.process.ByteProcessor) -> a
    void setRGB(byte[],byte[],byte[]) -> b
    void copyBits(ij.process.ImageProcessor,int,int,int) -> a
    void applyTable(int[]) -> a
    void fill() -> f_
    void filterRGB(int,double) -> a
    ij.process.ImageProcessor filterRGB(int,double,double) -> a
    void noise(double) -> c
    void findEdges() -> e_
    void autoThreshold() -> n
    ij.process.ImageProcessor crop() -> b
    ij.process.ImageProcessor duplicate() -> c
    int getInterpolatedPixel(double,double,int[]) -> a
    ij.process.ImageProcessor resize(int,int) -> h
    void flipVertical() -> o
    void convolve3x3(int[]) -> b
    void filter(int) -> c
    int[] getHistogram() -> p
    void setWeightingFactors(double,double,double) -> a
    double[] getWeightingFactors() -> t
    boolean isInvertedLut() -> u
    boolean isGrayscale() -> v
    int getBestIndex(java.awt.Color) -> b
    void invertLut() -> w
    void updateComposite(int[],int) -> a
    void threshold(int) -> d
    int getNChannels() -> x
    ij.process.FloatProcessor toFloat(int,ij.process.FloatProcessor) -> a
    void setPixels(int,ij.process.FloatProcessor) -> b
    int getBitDepth() -> r
ij.process.ColorStatistics -> ij.f.i:
ij.process.EllipseFitter -> ij.f.j:
    double xCenter -> a
    double yCenter -> b
    double major -> c
    double minor -> d
    double angle -> e
    double theta -> f
    int nCoordinates -> g
    int bitCount -> h
    double xsum -> i
    double ysum -> j
    double x2sum -> k
    double y2sum -> l
    double xysum -> m
    byte[] mask -> n
    int left -> o
    int top -> p
    int width -> q
    int height -> r
    double n -> s
    double xm -> t
    double ym -> u
    double u20 -> v
    double u02 -> w
    double u11 -> x
    void fit$69093366(ij.process.ImageProcessor) -> a
    void drawEllipse(ij.process.ImageProcessor) -> b
ij.process.FloatBlitter -> ij.f.k:
    float divideByZeroValue -> a
    int width -> b
    int height -> c
    float[] pixels -> d
    void copyBits(ij.process.ImageProcessor,int,int,int) -> a
ij.process.FloatPolygon -> ij.f.l:
    java.awt.Rectangle bounds -> d
    float minX -> e
    float minY -> f
    float maxX -> g
    float maxY -> h
    int npoints -> a
    float[] xpoints -> b
    float[] ypoints -> c
    boolean contains(float,float) -> a
    java.awt.Rectangle getBounds() -> a
    java.awt.geom.Rectangle2D$Double getFloatBounds() -> b
    void calculateBounds(float[],float[],int) -> a
    void addPoint(float,float) -> b
    void addPoint(double,double) -> a
ij.process.FloatProcessor -> ij.f.m:
    float min -> M
    float max -> N
    float snapshotMin -> O
    float snapshotMax -> P
    float[] pixels -> Q
    byte[] pixels8 -> R
    float[] snapshotPixels -> S
    float fillColor -> T
    boolean fixedScale -> U
    void findMinAndMax() -> ai
    void setMinAndMax(double,double) -> c
    void resetMinAndMax() -> k
    double getMin() -> i
    double getMax() -> j
    java.awt.Image createImage() -> a
    byte[] create8BitImage() -> s
    ij.process.ImageProcessor createProcessor(int,int) -> a
    void snapshot() -> d
    void reset() -> e
    void reset(ij.process.ImageProcessor) -> a
    void setSnapshotPixels(java.lang.Object) -> a
    java.lang.Object getSnapshotPixels() -> f
    int getPixel(int,int) -> b
    int get(int,int) -> c
    int get(int) -> a
    void set(int,int) -> d
    float getf(int,int) -> e
    void setf(int,int,float) -> a
    float getf(int) -> b
    void setf(int,float) -> a
    double getInterpolatedPixel(double,double) -> a
    int getPixelInterpolated(double,double) -> b
    void putPixel(int,int,int) -> a
    void putPixelValue(int,int,double) -> a
    float getPixelValue(int,int) -> f
    void drawPixel(int,int) -> g
    java.lang.Object getPixels() -> h
    java.lang.Object getPixelsCopy() -> aj
    void setPixels(java.lang.Object) -> b
    void copyBits(ij.process.ImageProcessor,int,int,int) -> a
    void applyTable(int[]) -> a
    void process(int,double) -> a
    void invert() -> g_
    void add(double) -> d
    void fill() -> f_
    void fill(ij.process.ImageProcessor) -> b
    void convolve3x3(int[]) -> b
    void filter(int) -> c
    void filter3x3(int,int[]) -> a
    void flipVertical() -> o
    void noise(double) -> c
    ij.process.ImageProcessor crop() -> b
    ij.process.ImageProcessor duplicate() -> c
    double getInterpolatedPixel(double,double,float[]) -> a
    ij.process.ImageProcessor resize(int,int) -> h
    double getBicubicInterpolatedPixel(double,double,ij.process.ImageProcessor) -> a
    void setColor(java.awt.Color) -> a
    void setValue(double) -> a
    void setBackgroundValue(double) -> b
    double getBackgroundValue() -> g
    void setThreshold(double,double,int) -> a
    void threshold(int) -> d
    void autoThreshold() -> n
    int[] getHistogram() -> p
    ij.process.FloatProcessor toFloat(int,ij.process.FloatProcessor) -> a
    void setPixels(int,ij.process.FloatProcessor) -> b
    int getBitDepth() -> r
ij.process.FloatStatistics -> ij.f.n:
ij.process.FloodFiller -> ij.f.o:
    int maxStackSize -> a
    int[] xstack -> b
    int[] ystack -> c
    int stackSize -> d
    ij.process.ImageProcessor ip -> e
    boolean isFloat -> f
    boolean fill(int,int) -> a
    boolean fill8(int,int) -> b
    void particleAnalyzerFill(int,int,double,double,ij.process.ImageProcessor,java.awt.Rectangle) -> a
    boolean inParticle(int,int,double,double) -> a
    void push(int,int) -> c
    int popx() -> a
    int popy() -> b
    void fillLine(ij.process.ImageProcessor,int,int,int) -> a
ij.process.ImageConverter -> ij.f.p:
    ij.ImagePlus imp -> a
    int type -> b
    boolean doScaling -> c
    void convertToGray8() -> a
    void setDoScaling(boolean) -> a
    boolean getDoScaling() -> b
ij.process.ImageProcessor -> ij.f.q:
    int fgColor -> a
    int lineWidth -> M
    int cx -> N
    int cy -> O
    java.awt.Font font -> P
    java.awt.FontMetrics fontMetrics -> Q
    boolean antialiasedText -> R
    int overGreen -> S
    int underBlue -> T
    boolean useBicubic -> U
    int sliceNumber -> V
    ij.gui.Overlay overlay -> W
    ij.gui.ProgressBar progressBar -> X
    int width -> b
    int height -> c
    int roiX -> d
    int roiY -> e
    int roiWidth -> f
    int roiHeight -> g
    int xMin -> h
    int xMax -> i
    int yMin -> j
    int yMax -> k
    boolean snapshotCopyMode -> l
    ij.process.ImageProcessor mask -> m
    java.awt.image.ColorModel baseCM -> n
    java.awt.image.ColorModel cm -> o
    byte[] rLUT1 -> p
    byte[] gLUT1 -> q
    byte[] bLUT1 -> r
    byte[] rLUT2 -> s
    byte[] gLUT2 -> t
    byte[] bLUT2 -> u
    boolean interpolate -> Y
    int interpolationMethod -> v
    double minThreshold -> w
    double maxThreshold -> x
    int histogramSize -> Z
    double histogramMin -> aa
    double histogramMax -> ab
    float[] cTable -> y
    boolean lutAnimation -> z
    java.awt.image.MemoryImageSource source -> A
    java.awt.Image img -> B
    boolean newPixels -> C
    java.awt.Color drawingColor -> D
    int clipXMin -> E
    int clipXMax -> F
    int clipYMin -> G
    int clipYMax -> H
    int justification -> ac
    int lutUpdateMode -> ad
    java.awt.image.WritableRaster raster -> I
    java.awt.image.BufferedImage image -> J
    java.awt.image.BufferedImage fmImage -> ae
    java.awt.image.ColorModel cm2 -> K
    java.awt.image.SampleModel sampleModel -> af
    java.awt.image.IndexColorModel defaultColorModel -> ag
    boolean minMaxSet -> L
    boolean inversionTested -> ah
    boolean invertedLut -> ai
    ij.process.ImageProcessor dotMask -> aj
    byte[] bytes -> ak
    int[] reds -> al
    int[] greens -> am
    int[] blues -> an
    void showProgress(double) -> e
    void hideProgress() -> y
    int getWidth() -> z
    int getHeight() -> A
    int getBitDepth() -> r
    java.awt.image.ColorModel getColorModel() -> B
    java.awt.image.ColorModel getCurrentColorModel() -> C
    void setColorModel(java.awt.image.ColorModel) -> a
    void setLut(ij.process.LUT) -> a
    void makeDefaultColorModel() -> D
    void invertLut() -> w
    int getBestIndex(java.awt.Color) -> b
    boolean isInvertedLut() -> u
    boolean isGrayscale() -> v
    boolean isColorLut() -> E
    boolean isPseudoColorLut() -> F
    boolean isDefaultLut() -> G
    void setColor(java.awt.Color) -> a
    void setColor(int) -> e
    void setValue(double) -> a
    void setBackgroundValue(double) -> b
    double getBackgroundValue() -> g
    double getMin() -> i
    double getMax() -> j
    void setMinAndMax(double,double) -> c
    void resetMinAndMax() -> k
    void setThreshold(double,double,int) -> a
    void setAutoThreshold(java.lang.String) -> a
    void setAutoThreshold(java.lang.String,boolean,int) -> a
    void setAutoThreshold(int,int) -> i
    void resetThreshold() -> H
    double getMinThreshold() -> I
    double getMaxThreshold() -> J
    int getLutUpdateMode() -> K
    void resetBinaryThreshold() -> L
    void setRoi(java.awt.Rectangle) -> a
    void setRoi(int,int,int,int) -> a
    void setRoi(ij.gui.Roi) -> a
    void setRoi(java.awt.Polygon) -> a
    void resetRoi() -> M
    java.awt.Rectangle getRoi() -> N
    void setMask(ij.process.ImageProcessor) -> c
    ij.process.ImageProcessor getMask() -> O
    byte[] getMaskArray() -> P
    void setProgressBar(ij.gui.ProgressBar) -> a
    void setInterpolate(boolean) -> a
    void setInterpolationMethod(int) -> f
    boolean getInterpolate() -> Q
    void process(int,double) -> a
    double[] getLine(double,double,double,double) -> a
    void putColumn(int,int,int[],int) -> a
    void moveTo(int,int) -> j
    void setLineWidth(int) -> g
    int getLineWidth() -> R
    void lineTo(int,int) -> k
    void drawLine(int,int,int,int) -> b
    void drawRect(int,int,int,int) -> c
    void drawOval(int,int,int,int) -> d
    void fillOval(int,int,int,int) -> e
    void drawPolygon(java.awt.Polygon) -> b
    void fillPolygon(java.awt.Polygon) -> c
    void drawDot(int,int) -> l
    void setupFontMetrics() -> ai
    void drawString(java.lang.String) -> b
    void drawString2(java.lang.String) -> d
    void drawString(java.lang.String,int,int) -> a
    void drawString(java.lang.String,int,int,java.awt.Color) -> a
    void setJustification(int) -> h
    void setFont(java.awt.Font) -> a
    void setAntialiasedText(boolean) -> b
    int getStringWidth(java.lang.String) -> c
    java.awt.Font getFont() -> S
    java.awt.FontMetrics getFontMetrics() -> T
    void smooth() -> U
    void sharpen() -> V
    void findEdges() -> e_
    void flipVertical() -> o
    ij.process.ImageProcessor rotateLeft() -> W
    void insert(ij.process.ImageProcessor,int,int) -> a
    java.lang.String toString() -> toString
    void fill() -> f_
    void fill(ij.process.ImageProcessor) -> b
    void fill(ij.gui.Roi) -> b
    void setCalibrationTable(float[]) -> a
    float[] getCalibrationTable() -> X
    void setHistogramSize(int) -> i
    int getHistogramSize() -> Y
    void setHistogramRange(double,double) -> e
    double getHistogramMin() -> Z
    double getHistogramMax() -> aa
    java.lang.Object getPixels() -> h
    int getPixel(int,int) -> b
    int get(int,int) -> c
    int get(int) -> a
    void set(int,int) -> d
    float getf(int,int) -> e
    float getf(int) -> b
    void setf(int,int,float) -> a
    void setf(int,float) -> a
    double getInterpolatedPixel(double,double) -> a
    int getPixelInterpolated(double,double) -> b
    double getInterpolatedValue(double,double) -> f
    double getBicubicInterpolatedPixel(double,double,ij.process.ImageProcessor) -> a
    double getBilinearInterpolatedPixel(double,double) -> g
    double cubic(double) -> f
    float getEdgeValue(int,int) -> m
    void putPixel(int,int,int) -> a
    float getPixelValue(int,int) -> f
    void putPixelValue(int,int,double) -> a
    void drawPixel(int,int) -> g
    void setPixels(java.lang.Object) -> b
    void copyBits(ij.process.ImageProcessor,int,int,int) -> a
    void applyTable(int[]) -> a
    void invert() -> g_
    void add(double) -> d
    java.awt.Image createImage() -> a
    ij.process.ImageProcessor createProcessor(int,int) -> a
    void snapshot() -> d
    void reset() -> e
    void reset(ij.process.ImageProcessor) -> a
    void setSnapshotPixels(java.lang.Object) -> a
    java.lang.Object getSnapshotPixels() -> f
    void convolve3x3(int[]) -> b
    void filter(int) -> c
    void noise(double) -> c
    ij.process.ImageProcessor crop() -> b
    void threshold(int) -> d
    ij.process.ImageProcessor duplicate() -> c
    ij.process.ImageProcessor resize(int,int) -> h
    void translate(double,double) -> h
    int[] getHistogram() -> p
    void setLutAnimation(boolean) -> c
    void resetPixels(java.lang.Object) -> c
    ij.process.ImageProcessor convertToByte(boolean) -> d
    ij.process.ImageProcessor convertToShort(boolean) -> e
    ij.process.ImageProcessor convertToFloat() -> ab
    ij.process.ImageProcessor convertToRGB() -> ac
    void autoThreshold() -> n
    int getAutoThreshold(int[]) -> c
    void setClipRect(java.awt.Rectangle) -> b
    java.lang.String maskSizeError(ij.process.ImageProcessor) -> d
    java.awt.image.SampleModel getIndexSampleModel() -> ad
    java.awt.image.IndexColorModel getDefaultColorModel() -> ae
    void setSnapshotCopyMode(boolean) -> f
    int getNChannels() -> x
    ij.process.FloatProcessor toFloat(int,ij.process.FloatProcessor) -> a
    void setPixels(int,ij.process.FloatProcessor) -> b
    void updateComposite(int[],int) -> a
    byte[] create8BitImage() -> s
    boolean isBinary() -> q
    void setUseBicubic(boolean) -> g
    ij.process.ImageStatistics getStatistics() -> af
    int getSliceNumber() -> ag
    void setSliceNumber(int) -> j
    java.lang.Object clone() -> clone
    void setOverlay(ij.gui.Overlay) -> a
    ij.gui.Overlay getOverlay() -> ah
ij.process.ImageStatistics -> ij.f.r:
    int[] histogram -> a
    int pixelCount -> b
    long longPixelCount -> c
    int mode -> d
    double dmode -> e
    double area -> f
    double min -> g
    double max -> h
    double mean -> i
    double median -> j
    double stdDev -> k
    double skewness -> l
    double kurtosis -> m
    double xCentroid -> n
    double yCentroid -> o
    double xCenterOfMass -> p
    double yCenterOfMass -> q
    double roiX -> r
    double roiY -> s
    double roiWidth -> t
    double roiHeight -> u
    double umean -> v
    double major -> w
    double minor -> x
    double angle -> y
    int[] histogram16 -> z
    long[] longHistogram -> A
    double areaFraction -> B
    int xstart -> C
    int ystart -> D
    double histMin -> E
    double histMax -> F
    int maxCount -> G
    int nBins -> H
    double binSize -> I
    int width -> J
    int height -> K
    int rx -> L
    int ry -> M
    int rw -> N
    int rh -> O
    double pw -> P
    double ph -> Q
    ij.measure.Calibration cal -> R
    ij.process.EllipseFitter ef -> S
    ij.process.ImageStatistics getStatistics(ij.process.ImageProcessor,int,ij.measure.Calibration) -> a
    void getRawMinAndMax(int,int) -> a
    void getRawStatistics(int,int) -> b
    void calculateStdDev(double,double,double) -> a
    void setup(ij.process.ImageProcessor,ij.measure.Calibration) -> a
    void getCentroid(ij.process.ImageProcessor) -> a
    void fitEllipse(ij.process.ImageProcessor,int) -> a
    void drawEllipse(ij.process.ImageProcessor) -> b
    void calculateMedian(int[],int,int,ij.measure.Calibration) -> a
    void calculateAreaFraction(ij.process.ImageProcessor,int[]) -> a
    long[] getHistogram() -> a
    java.lang.String toString() -> toString
ij.process.LUT -> ij.f.s:
    double min -> a
    double max -> b
    byte[] getBytes() -> a
    ij.process.LUT createLutFromColor(java.awt.Color) -> a
    java.lang.Object clone() -> clone
    java.lang.String toString() -> toString
ij.process.PolygonFiller -> ij.f.t:
    int edges -> a
    int activeEdges -> b
    int[] x -> c
    int[] y -> d
    int n -> e
    double[] ex -> f
    int[] ey1 -> g
    int[] ey2 -> h
    double[] eslope -> i
    int[] sedge -> j
    int[] aedge -> k
    void setPolygon(int[],int[],int) -> a
    ij.process.ImageProcessor getMask(int,int) -> a
ij.process.ShortBlitter -> ij.f.u:
    int width -> a
    int height -> b
    short[] pixels -> c
    void copyBits(ij.process.ImageProcessor,int,int,int) -> a
ij.process.ShortProcessor -> ij.f.v:
    int min -> M
    int max -> N
    int snapshotMin -> O
    int snapshotMax -> P
    short[] pixels -> Q
    byte[] pixels8 -> R
    short[] snapshotPixels -> S
    boolean fixedScale -> T
    void init(int,int,short[],java.awt.image.ColorModel) -> a
    void findMinAndMax() -> ai
    java.awt.Image createImage() -> a
    byte[] create8BitImage() -> s
    ij.process.ImageProcessor createProcessor(int,int) -> a
    void snapshot() -> d
    void reset() -> e
    void reset(ij.process.ImageProcessor) -> a
    void setSnapshotPixels(java.lang.Object) -> a
    java.lang.Object getSnapshotPixels() -> f
    double getMin() -> i
    double getMax() -> j
    void setMinAndMax(double,double) -> c
    void resetMinAndMax() -> k
    int getPixel(int,int) -> b
    int get(int,int) -> c
    int get(int) -> a
    void set(int,int) -> d
    float getf(int,int) -> e
    void setf(int,int,float) -> a
    float getf(int) -> b
    void setf(int,float) -> a
    double getInterpolatedPixel(double,double) -> a
    int getPixelInterpolated(double,double) -> b
    void putPixel(int,int,int) -> a
    void putPixelValue(int,int,double) -> a
    void drawPixel(int,int) -> g
    float getPixelValue(int,int) -> f
    java.lang.Object getPixels() -> h
    java.lang.Object getPixelsCopy() -> aj
    void setPixels(java.lang.Object) -> b
    void copyBits(ij.process.ImageProcessor,int,int,int) -> a
    void applyTable(int[]) -> a
    void process(int,double) -> a
    void invert() -> g_
    void add(double) -> d
    void fill() -> f_
    void fill(ij.process.ImageProcessor) -> b
    void convolve3x3(int[]) -> b
    void filter(int) -> c
    void filter3x3(int,int[]) -> a
    void flipVertical() -> o
    double getInterpolatedPixel(double,double,short[]) -> a
    ij.process.ImageProcessor resize(int,int) -> h
    ij.process.ImageProcessor crop() -> b
    ij.process.ImageProcessor duplicate() -> c
    void setColor(java.awt.Color) -> a
    void setValue(double) -> a
    void setBackgroundValue(double) -> b
    double getBackgroundValue() -> g
    int[] getHistogram() -> p
    void setThreshold(double,double,int) -> a
    void noise(double) -> c
    void threshold(int) -> d
    ij.process.FloatProcessor toFloat(int,ij.process.FloatProcessor) -> a
    void setPixels(int,ij.process.FloatProcessor) -> b
    int getBitDepth() -> r
ij.process.ShortStatistics -> ij.f.w:
ij.process.StackProcessor -> ij.f.x:
    ij.ImageStack stack -> a
    ij.process.ImageProcessor ip -> b
    int nSlices -> c
    int[] table -> d
    void applyTable(int[]) -> a
    void copyBits(ij.process.ImageProcessor,int,int,int) -> a
    void copyBits(ij.ImageStack,int,int,int) -> a
    void copyBits(ij.process.ImageProcessor,ij.ImageStack,int,int,int) -> a
ij.process.TypeConverter -> ij.f.y:
    ij.process.ImageProcessor ip -> a
    int type -> b
    boolean doScaling -> c
    int width -> d
    int height -> e
    ij.process.ImageProcessor convertToByte() -> a
    ij.process.ByteProcessor convertRGBToByte() -> d
    ij.process.ImageProcessor convertToShort() -> b
    ij.process.ShortProcessor convertByteToShort() -> e
    ij.process.ImageProcessor convertToFloat(float[]) -> a
    ij.process.FloatProcessor convertByteToFloat(float[]) -> b
    ij.process.ImageProcessor convertToRGB() -> c
ij.text.TextCanvas -> ij.g.a:
    ij.text.TextPanel tp -> e
    java.awt.Font fFont -> a
    java.awt.FontMetrics fMetrics -> b
    java.awt.Graphics gImage -> f
    java.awt.Image iImage -> c
    boolean antialiased -> d
    void setBounds(int,int,int,int) -> setBounds
    void update(java.awt.Graphics) -> update
    void paint(java.awt.Graphics) -> paint
    char[] getChars(int,int) -> a
    void calcAutoWidth(int) -> a
ij.text.TextPanel -> ij.g.b:
    int iGridWidth -> o
    int iX -> a
    int iY -> b
    java.lang.String[] sColHead -> c
    java.util.Vector vData -> d
    int[] iColWidth -> e
    int iColCount -> f
    int iRowCount -> g
    int iRowHeight -> h
    int iFirstRow -> i
    java.awt.Scrollbar sbHoriz -> p
    java.awt.Scrollbar sbVert -> q
    boolean bDrag -> r
    int iXDrag -> s
    int iColDrag -> t
    boolean headings -> j
    java.lang.String title -> u
    java.lang.String labels -> v
    java.awt.event.KeyListener keyListener -> w
    java.awt.Cursor resizeCursor -> x
    java.awt.Cursor defaultCursor -> y
    int selStart -> k
    int selEnd -> l
    int selOrigin -> z
    ij.text.TextCanvas tc -> A
    java.awt.PopupMenu pm -> B
    boolean columnsManuallyAdjusted -> C
    long mouseDownTime -> D
    java.lang.String filePath -> E
    ij.measure.ResultsTable rt -> m
    boolean unsavedLines -> n
    void addPopupItem(java.lang.String) -> j
    void setColumnHeadings(java.lang.String) -> a
    java.lang.String getColumnHeadings() -> a
    void updateColumnHeadings(java.lang.String) -> b
    void setFont(java.awt.Font,boolean) -> a
    void appendLine(java.lang.String) -> c
    void append(java.lang.String) -> d
    void appendWithoutUpdate(java.lang.String) -> e
    void updateDisplay() -> b
    void adjustVScroll() -> c
    void adjustHScroll() -> d
    void adjustmentValueChanged(java.awt.event.AdjustmentEvent) -> adjustmentValueChanged
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void run() -> run
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mouseMoved(java.awt.event.MouseEvent) -> mouseMoved
    void mouseDragged(java.awt.event.MouseEvent) -> mouseDragged
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseWheelMoved(java.awt.event.MouseWheelEvent) -> mouseWheelMoved
    void scroll(int) -> a
    void addKeyListener(java.awt.event.KeyListener) -> addKeyListener
    void addMouseListener(java.awt.event.MouseListener) -> addMouseListener
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void doCommand(java.lang.String) -> f
    void lostOwnership(java.awt.datatransfer.Clipboard,java.awt.datatransfer.Transferable) -> lostOwnership
    void rename(java.lang.String) -> g
    void extendSelection(int,int) -> a
    int copySelection() -> k
    void clearSelection() -> l
    void clear() -> e
    void selectAll() -> m
    void resetSelection() -> n
    void save(java.io.PrintWriter) -> a
    boolean saveAs(java.lang.String) -> h
    java.lang.String getText() -> f
    void setTitle(java.lang.String) -> i
    int getLineCount() -> g
    void setLine(int,java.lang.String) -> a
    void setResultsTable(ij.measure.ResultsTable) -> a
    ij.measure.ResultsTable getResultsTable() -> h
    void scrollToTop() -> i
    void flush() -> j
ij.text.TextWindow -> ij.g.c:
    ij.text.TextPanel textPanel -> b
    java.awt.CheckboxMenuItem antialiased -> c
    int[] sizes -> d
    int fontSize -> e
    java.awt.MenuBar mb -> a
    void append(java.lang.String) -> a
    void setFont() -> c
    boolean openFile(java.lang.String) -> c
    ij.text.TextPanel getTextPanel() -> a
    void load(java.io.BufferedReader) -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void processWindowEvent(java.awt.event.WindowEvent) -> processWindowEvent
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
    void close() -> b
    void rename(java.lang.String) -> b
    void changeFontSize(boolean) -> a
    void focusGained(java.awt.event.FocusEvent) -> focusGained
    void focusLost(java.awt.event.FocusEvent) -> focusLost
ij.util.Java2 -> ij.h.a:
    boolean lookAndFeelSet -> a
    void setAntialiasedText(java.awt.Graphics,boolean) -> a
    int getStringWidth(java.lang.String,java.awt.FontMetrics,java.awt.Graphics) -> a
    void setSystemLookAndFeel() -> a
ij.util.StringSorter -> ij.h.b:
    int npoints -> a
    int maxPoints -> d
    int[] xpoints -> b
    int[] ypoints -> c
    ij.process.ImageProcessor ip -> e
    byte[] bpixels -> f
    int[] cpixels -> g
    short[] spixels -> h
    float[] fpixels -> i
    int width -> j
    int height -> k
    float lowerThreshold -> l
    float upperThreshold -> m
    int xmin -> n
    boolean exactPixelValue -> o
    boolean allPoints -> p
    void sort(java.lang.String[]) -> a
    void sort(java.lang.String[],int,int) -> a
    void autoOutline(int,int,double,double,int) -> a
    void autoOutline(int,int,int,int) -> a
    void autoOutline(int,int,double,int) -> a
    boolean traceEdge(int,int,boolean) -> a
    void addPoint(int,int) -> a
    boolean inside(int,int) -> b
    boolean inside(int,int,int) -> a
    float getPixel(int,int) -> c
    void setAllPoints(boolean) -> a
    boolean allPoints() -> a
ij.util.Tools -> ij.h.c:
    char[] hexDigits -> a
    java.lang.String c2hex(java.awt.Color) -> a
    double[] getMinMax(double[]) -> a
    double[] getMinMax(float[]) -> a
    float[] toFloat(double[]) -> b
    java.lang.String fixNewLines(java.lang.String) -> a
    double parseDouble(java.lang.String,double) -> a
    double parseDouble(java.lang.String) -> b
    int getDecimalPlaces(double,double) -> a
    java.lang.String[] split(java.lang.String) -> c
    java.lang.String[] split(java.lang.String,java.lang.String) -> a
    java.lang.String[] splitLines(java.lang.String) -> e
    int[] rank(double[]) -> c
    int[] rank(java.lang.String[]) -> a
    java.lang.String openFromIJJarAsString(java.lang.String) -> d
ij.util.Tools$1 -> ij.h.d:
    java.lang.Double[] val$data -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
ij.util.Tools$2 -> ij.h.e:
    java.lang.String[] val$data -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
